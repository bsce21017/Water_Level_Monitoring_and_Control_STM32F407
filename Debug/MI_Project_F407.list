
MI_Project_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004598  08004598  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080045a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000130  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000add3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a66  00000000  00000000  0002ae7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a90  00000000  00000000  0002d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022603  00000000  00000000  0002dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfb6  00000000  00000000  000504e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5b67  00000000  00000000  0005d499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133000  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034a4  00000000  00000000  00133050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044b0 	.word	0x080044b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080044b0 	.word	0x080044b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <DWT_Delay_Init+0x58>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <DWT_Delay_Init+0x58>)
 8000d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d7e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <DWT_Delay_Init+0x58>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <DWT_Delay_Init+0x58>)
 8000d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8a:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <DWT_Delay_Init+0x5c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <DWT_Delay_Init+0x5c>)
 8000d92:	f023 0301 	bic.w	r3, r3, #1
 8000d96:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <DWT_Delay_Init+0x5c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <DWT_Delay_Init+0x5c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <DWT_Delay_Init+0x5c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000daa:	bf00      	nop
  __NOP();
 8000dac:	bf00      	nop
  __NOP();
 8000dae:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <DWT_Delay_Init+0x5c>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e000      	b.n	8000dbe <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000dbc:	2301      	movs	r3, #1
  }
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000edf0 	.word	0xe000edf0
 8000dcc:	e0001000 	.word	0xe0001000

08000dd0 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <DWT_Delay_us+0x40>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000dde:	f002 fbcf 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <DWT_Delay_us+0x44>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000df4:	bf00      	nop
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <DWT_Delay_us+0x40>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1ad2      	subs	r2, r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3f8      	bcc.n	8000df6 <DWT_Delay_us+0x26>
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e0001000 	.word	0xe0001000
 8000e14:	431bde83 	.word	0x431bde83

08000e18 <lcd_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd_enablePulse(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <lcd_enablePulse+0x34>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <lcd_enablePulse+0x38>)
 8000e22:	8811      	ldrh	r1, [r2, #0]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 ff54 	bl	8002cd4 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000e2c:	2014      	movs	r0, #20
 8000e2e:	f7ff ffcf 	bl	8000dd0 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <lcd_enablePulse+0x34>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <lcd_enablePulse+0x38>)
 8000e38:	8811      	ldrh	r1, [r2, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ff49 	bl	8002cd4 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000e42:	203c      	movs	r0, #60	; 0x3c
 8000e44:	f7ff ffc4 	bl	8000dd0 <DWT_Delay_us>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000098 	.word	0x20000098
 8000e50:	2000009e 	.word	0x2000009e

08000e54 <lcd_rs>:

/**
 * @brief RS control
 */
static void lcd_rs(bool state)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <lcd_rs+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <lcd_rs+0x28>)
 8000e64:	8811      	ldrh	r1, [r2, #0]
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 ff33 	bl	8002cd4 <HAL_GPIO_WritePin>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000098 	.word	0x20000098
 8000e7c:	2000009c 	.word	0x2000009c

08000e80 <lcd_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd_write(uint8_t wbyte)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000e98:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <lcd_write+0x198>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d05a      	beq.n	8000f56 <lcd_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000ea0:	4b5e      	ldr	r3, [pc, #376]	; (800101c <lcd_write+0x19c>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <lcd_write+0x1a0>)
 8000ea6:	8819      	ldrh	r1, [r3, #0]
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	f001 ff0f 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <lcd_write+0x19c>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <lcd_write+0x1a4>)
 8000ebc:	8819      	ldrh	r1, [r3, #0]
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f001 ff04 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000ecc:	4b53      	ldr	r3, [pc, #332]	; (800101c <lcd_write+0x19c>)
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	4b55      	ldr	r3, [pc, #340]	; (8001028 <lcd_write+0x1a8>)
 8000ed2:	8819      	ldrh	r1, [r3, #0]
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	f001 fef9 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	; (800101c <lcd_write+0x19c>)
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <lcd_write+0x1ac>)
 8000ee8:	8819      	ldrh	r1, [r3, #0]
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f001 feee 	bl	8002cd4 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <lcd_write+0x1b0>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <lcd_write+0x1b4>)
 8000efe:	8819      	ldrh	r1, [r3, #0]
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f001 fee3 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000f0e:	4b48      	ldr	r3, [pc, #288]	; (8001030 <lcd_write+0x1b0>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <lcd_write+0x1b8>)
 8000f14:	8819      	ldrh	r1, [r3, #0]
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f001 fed8 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <lcd_write+0x1b0>)
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <lcd_write+0x1bc>)
 8000f2a:	8819      	ldrh	r1, [r3, #0]
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	f001 fecd 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <lcd_write+0x1b0>)
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	4b40      	ldr	r3, [pc, #256]	; (8001040 <lcd_write+0x1c0>)
 8000f40:	8819      	ldrh	r1, [r3, #0]
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f001 fec2 	bl	8002cd4 <HAL_GPIO_WritePin>
    lcd_enablePulse();
 8000f50:	f7ff ff62 	bl	8000e18 <lcd_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd_enablePulse();
  }
}
 8000f54:	e05b      	b.n	800100e <lcd_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <lcd_write+0x1b0>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <lcd_write+0x1b4>)
 8000f5c:	8819      	ldrh	r1, [r3, #0]
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	f001 feb4 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000f6c:	4b30      	ldr	r3, [pc, #192]	; (8001030 <lcd_write+0x1b0>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <lcd_write+0x1b8>)
 8000f72:	8819      	ldrh	r1, [r3, #0]
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f001 fea9 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <lcd_write+0x1b0>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <lcd_write+0x1bc>)
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	f001 fe9e 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <lcd_write+0x1b0>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <lcd_write+0x1c0>)
 8000f9e:	8819      	ldrh	r1, [r3, #0]
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f001 fe93 	bl	8002cd4 <HAL_GPIO_WritePin>
    lcd_enablePulse();
 8000fae:	f7ff ff33 	bl	8000e18 <lcd_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <lcd_write+0x1b0>)
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <lcd_write+0x1b4>)
 8000fb8:	8819      	ldrh	r1, [r3, #0]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f001 fe86 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <lcd_write+0x1b0>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <lcd_write+0x1b8>)
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f001 fe7b 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <lcd_write+0x1b0>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <lcd_write+0x1bc>)
 8000fe4:	8819      	ldrh	r1, [r3, #0]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f001 fe70 	bl	8002cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <lcd_write+0x1b0>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <lcd_write+0x1c0>)
 8000ffa:	8819      	ldrh	r1, [r3, #0]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	f001 fe65 	bl	8002cd4 <HAL_GPIO_WritePin>
    lcd_enablePulse();
 800100a:	f7ff ff05 	bl	8000e18 <lcd_enablePulse>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000
 800101c:	200000a0 	.word	0x200000a0
 8001020:	200000a4 	.word	0x200000a4
 8001024:	200000a6 	.word	0x200000a6
 8001028:	200000a8 	.word	0x200000a8
 800102c:	200000aa 	.word	0x200000aa
 8001030:	200000ac 	.word	0x200000ac
 8001034:	200000b0 	.word	0x200000b0
 8001038:	200000b2 	.word	0x200000b2
 800103c:	200000b4 	.word	0x200000b4
 8001040:	200000b6 	.word	0x200000b6

08001044 <lcd_writeCommand>:

/**
 * @brief Write command
 */
static void lcd_writeCommand(uint8_t cmd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  lcd_rs(false);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ff00 	bl	8000e54 <lcd_rs>
  lcd_write(cmd);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff12 	bl	8000e80 <lcd_write>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <lcd_writeData>:

/**
 * @brief Write data
 */
static void lcd_writeData(uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  lcd_rs(true);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fef0 	bl	8000e54 <lcd_rs>
  lcd_write(data);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff02 	bl	8000e80 <lcd_write>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <lcd_write4>:

/**
 * @brief 4-bits write
 */
static void lcd_write4(uint8_t nib)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	71fb      	strb	r3, [r7, #7]
  lcd_rs(false);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff fedc 	bl	8000e54 <lcd_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <lcd_write4+0x7c>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <lcd_write4+0x80>)
 80010a2:	8819      	ldrh	r1, [r3, #0]
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f001 fe11 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <lcd_write4+0x7c>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <lcd_write4+0x84>)
 80010b8:	8819      	ldrh	r1, [r3, #0]
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	f001 fe06 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <lcd_write4+0x7c>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <lcd_write4+0x88>)
 80010ce:	8819      	ldrh	r1, [r3, #0]
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f001 fdfb 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <lcd_write4+0x7c>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <lcd_write4+0x8c>)
 80010e4:	8819      	ldrh	r1, [r3, #0]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f001 fdf0 	bl	8002cd4 <HAL_GPIO_WritePin>
  lcd_enablePulse();
 80010f4:	f7ff fe90 	bl	8000e18 <lcd_enablePulse>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000ac 	.word	0x200000ac
 8001104:	200000b0 	.word	0x200000b0
 8001108:	200000b2 	.word	0x200000b2
 800110c:	200000b4 	.word	0x200000b4
 8001110:	200000b6 	.word	0x200000b6

08001114 <lcd_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	817b      	strh	r3, [r7, #10]
 8001122:	4613      	mov	r3, r2
 8001124:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8001126:	f7ff fe23 	bl	8000d70 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <lcd_init_4bits+0xa8>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <lcd_init_4bits+0xac>)
 8001132:	897b      	ldrh	r3, [r7, #10]
 8001134:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <lcd_init_4bits+0xb0>)
 8001138:	893b      	ldrh	r3, [r7, #8]
 800113a:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <lcd_init_4bits+0xb4>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <lcd_init_4bits+0xb8>)
 8001144:	8b3b      	ldrh	r3, [r7, #24]
 8001146:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <lcd_init_4bits+0xbc>)
 800114a:	8bbb      	ldrh	r3, [r7, #28]
 800114c:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 800114e:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <lcd_init_4bits+0xc0>)
 8001150:	8c3b      	ldrh	r3, [r7, #32]
 8001152:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <lcd_init_4bits+0xc4>)
 8001156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001158:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <lcd_init_4bits+0xc8>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <lcd_init_4bits+0xcc>)
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8001166:	2014      	movs	r0, #20
 8001168:	f000 fee2 	bl	8001f30 <HAL_Delay>
  //2. Attentions sequence
  lcd_write4(0x3);
 800116c:	2003      	movs	r0, #3
 800116e:	f7ff ff89 	bl	8001084 <lcd_write4>
  LCD_MS_DELAY(5);
 8001172:	2005      	movs	r0, #5
 8001174:	f000 fedc 	bl	8001f30 <HAL_Delay>
  lcd_write4(0x3);
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff ff83 	bl	8001084 <lcd_write4>
  LCD_MS_DELAY(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fed6 	bl	8001f30 <HAL_Delay>
  lcd_write4(0x3);
 8001184:	2003      	movs	r0, #3
 8001186:	f7ff ff7d 	bl	8001084 <lcd_write4>
  LCD_MS_DELAY(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f000 fed0 	bl	8001f30 <HAL_Delay>
  lcd_write4(0x2);  //4 bit mode
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff ff77 	bl	8001084 <lcd_write4>
  LCD_MS_DELAY(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f000 feca 	bl	8001f30 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800119c:	2028      	movs	r0, #40	; 0x28
 800119e:	f7ff ff51 	bl	8001044 <lcd_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff ff4e 	bl	8001044 <lcd_writeCommand>
  //4. Clear LCD and return home
  lcd_writeCommand(LCD_CLEARDISPLAY);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ff4b 	bl	8001044 <lcd_writeCommand>
  LCD_MS_DELAY(3);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 febe 	bl	8001f30 <HAL_Delay>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000098 	.word	0x20000098
 80011c0:	2000009c 	.word	0x2000009c
 80011c4:	2000009e 	.word	0x2000009e
 80011c8:	200000ac 	.word	0x200000ac
 80011cc:	200000b0 	.word	0x200000b0
 80011d0:	200000b2 	.word	0x200000b2
 80011d4:	200000b4 	.word	0x200000b4
 80011d8:	200000b6 	.word	0x200000b6
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000002 	.word	0x20000002

080011e4 <lcd_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd_setCursor(uint8_t row, uint8_t col)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d108      	bne.n	8001214 <lcd_setCursor+0x30>
  {
    maskData |= (0x80);
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001208:	73fb      	strb	r3, [r7, #15]
    lcd_writeCommand(maskData);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff19 	bl	8001044 <lcd_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd_writeCommand(maskData);
  }
}
 8001212:	e007      	b.n	8001224 <lcd_setCursor+0x40>
    maskData |= (0xc0);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800121a:	73fb      	strb	r3, [r7, #15]
    lcd_writeCommand(maskData);
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff10 	bl	8001044 <lcd_writeCommand>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <lcd_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd_1stLine(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  lcd_setCursor(0,0);
 8001230:	2100      	movs	r1, #0
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ffd6 	bl	80011e4 <lcd_setCursor>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <lcd_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd_2ndLine(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  lcd_setCursor(1,0);
 8001240:	2100      	movs	r1, #0
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff ffce 	bl	80011e4 <lcd_setCursor>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <lcd_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd_cursorShow(bool state)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if(state)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <lcd_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <lcd_cursorShow+0x4c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f043 0303 	orr.w	r3, r3, #3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <lcd_cursorShow+0x4c>)
 8001268:	701a      	strb	r2, [r3, #0]
    lcd_writeCommand(DisplayControl);
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <lcd_cursorShow+0x4c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fee8 	bl	8001044 <lcd_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd_writeCommand(DisplayControl);
  }
}
 8001274:	e00b      	b.n	800128e <lcd_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <lcd_cursorShow+0x4c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <lcd_cursorShow+0x4c>)
 8001282:	701a      	strb	r2, [r3, #0]
    lcd_writeCommand(DisplayControl);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <lcd_cursorShow+0x4c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fedb 	bl	8001044 <lcd_writeCommand>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000001 	.word	0x20000001

0800129c <lcd_clear>:

/**
 * @brief Display clear
 */
void lcd_clear(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  lcd_writeCommand(LCD_CLEARDISPLAY);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff fecf 	bl	8001044 <lcd_writeCommand>
  LCD_MS_DELAY(3);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f000 fe42 	bl	8001f30 <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <lcd_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd_printf("Value1 = %.1f", 123.45))
 */
void lcd_printf(const char* str, ...)
{
 80012b0:	b40f      	push	{r0, r1, r2, r3}
 80012b2:	b590      	push	{r4, r7, lr}
 80012b4:	b089      	sub	sp, #36	; 0x24
 80012b6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80012b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012bc:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fc9a 	bl	8003c00 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	77fb      	strb	r3, [r7, #31]
 80012d0:	e00a      	b.n	80012e8 <lcd_printf+0x38>
  {
    lcd_writeData((uint8_t)stringArray[i]);
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	3320      	adds	r3, #32
 80012d6:	443b      	add	r3, r7
 80012d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fec1 	bl	8001064 <lcd_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	77fb      	strb	r3, [r7, #31]
 80012e8:	7ffc      	ldrb	r4, [r7, #31]
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff6e 	bl	80001d0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	429c      	cmp	r4, r3
 80012f8:	d202      	bcs.n	8001300 <lcd_printf+0x50>
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d9e8      	bls.n	80012d2 <lcd_printf+0x22>
  }
}
 8001300:	bf00      	nop
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800130a:	b004      	add	sp, #16
 800130c:	4770      	bx	lr

0800130e <map>:
ADC_HandleTypeDef hadc2;

TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	1a8a      	subs	r2, r1, r2
 8001328:	fb03 f202 	mul.w	r2, r3, r2
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1acb      	subs	r3, r1, r3
 8001332:	fb92 f2f3 	sdiv	r2, r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	4413      	add	r3, r2
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <ADCConfig>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int ADCConfig(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	HAL_ADC_Start(&hadc1);
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <ADCConfig+0x4c>)
 8001350:	f000 fe56 	bl	8002000 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8001354:	2164      	movs	r1, #100	; 0x64
 8001356:	480f      	ldr	r0, [pc, #60]	; (8001394 <ADCConfig+0x4c>)
 8001358:	f000 ff57 	bl	800220a <HAL_ADC_PollForConversion>
    uint16_t adcVal = HAL_ADC_GetValue(&hadc1);
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <ADCConfig+0x4c>)
 800135e:	f000 ffdf 	bl	8002320 <HAL_ADC_GetValue>
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
    int maping = map(adcVal, 0, 4095, 0, 40);
 8001366:	88f8      	ldrh	r0, [r7, #6]
 8001368:	2328      	movs	r3, #40	; 0x28
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001372:	2100      	movs	r1, #0
 8001374:	f7ff ffcb 	bl	800130e <map>
 8001378:	6038      	str	r0, [r7, #0]
    HAL_ADC_Stop(&hadc1);
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <ADCConfig+0x4c>)
 800137c:	f000 ff12 	bl	80021a4 <HAL_ADC_Stop>
    HAL_Delay(500);
 8001380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001384:	f000 fdd4 	bl	8001f30 <HAL_Delay>
    return maping;
 8001388:	683b      	ldr	r3, [r7, #0]

}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000bc 	.word	0x200000bc

08001398 <lcd_initial>:
//    HAL_Delay(500);
//    return adcVal;
//
//}

void lcd_initial(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	  lcd_clear();
 800139c:	f7ff ff7e 	bl	800129c <lcd_clear>
	  lcd_cursorShow(0);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff ff53 	bl	800124c <lcd_cursorShow>
	  //lcd_setCursor(0, 3);
	  lcd_printf("Water Level");
 80013a6:	4810      	ldr	r0, [pc, #64]	; (80013e8 <lcd_initial+0x50>)
 80013a8:	f7ff ff82 	bl	80012b0 <lcd_printf>
	  lcd_2ndLine();
 80013ac:	f7ff ff46 	bl	800123c <lcd_2ndLine>
	  //lcd_setCursor(1, 0);
	  lcd_printf("Sensor Module");
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <lcd_initial+0x54>)
 80013b2:	f7ff ff7d 	bl	80012b0 <lcd_printf>
	  HAL_Delay(2000);
 80013b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013ba:	f000 fdb9 	bl	8001f30 <HAL_Delay>
	  lcd_clear();
 80013be:	f7ff ff6d 	bl	800129c <lcd_clear>
	  lcd_1stLine();
 80013c2:	f7ff ff33 	bl	800122c <lcd_1stLine>
	  //lcd_setCursor(0, 0);
	  lcd_printf("Project by:Awwab");
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <lcd_initial+0x58>)
 80013c8:	f7ff ff72 	bl	80012b0 <lcd_printf>
	  lcd_2ndLine();
 80013cc:	f7ff ff36 	bl	800123c <lcd_2ndLine>
	  lcd_printf("Abubakar, Furqan");
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <lcd_initial+0x5c>)
 80013d2:	f7ff ff6d 	bl	80012b0 <lcd_printf>
	  lcd_clear();
 80013d6:	f7ff ff61 	bl	800129c <lcd_clear>

	  HAL_Delay(2000);
 80013da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013de:	f000 fda7 	bl	8001f30 <HAL_Delay>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	080044c8 	.word	0x080044c8
 80013ec:	080044d4 	.word	0x080044d4
 80013f0:	080044e4 	.word	0x080044e4
 80013f4:	080044f8 	.word	0x080044f8

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0a0      	sub	sp, #128	; 0x80
 80013fc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char txt[30];
	char txt1[30];
	char txt2[30];
	int adcVal = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f000 fd23 	bl	8001e4c <HAL_Init>
  int voltageOut;
  int quotient, remainder, tempA, tempB;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f935 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f000 fa8f 	bl	800192c <MX_GPIO_Init>
  MX_TIM1_Init();
 800140e:	f000 fa3d 	bl	800188c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001412:	f000 f997 	bl	8001744 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001416:	f000 f9e7 	bl	80017e8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init_4bits(RS_GPIO_Port, RS_Pin, EN_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	9303      	str	r3, [sp, #12]
 800141e:	2310      	movs	r3, #16
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2304      	movs	r3, #4
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	2301      	movs	r3, #1
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	4b7d      	ldr	r3, [pc, #500]	; (8001620 <main+0x228>)
 800142c:	2208      	movs	r2, #8
 800142e:	2102      	movs	r1, #2
 8001430:	487b      	ldr	r0, [pc, #492]	; (8001620 <main+0x228>)
 8001432:	f7ff fe6f 	bl	8001114 <lcd_init_4bits>
  HAL_Delay(100);
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f000 fd7a 	bl	8001f30 <HAL_Delay>

  HAL_Delay(2000);
 800143c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001440:	f000 fd76 	bl	8001f30 <HAL_Delay>
  //lcd_clear();
  lcd_initial();
 8001444:	f7ff ffa8 	bl	8001398 <lcd_initial>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	value = ADCConfig();
 8001448:	f7ff ff7e 	bl	8001348 <ADCConfig>
 800144c:	66b8      	str	r0, [r7, #104]	; 0x68
		//HAL_Delay(500);

	  //int decimal = HAL_GPIO_ReadPin(ckeck_sense_GPIO_Port, ckeck_sense_Pin);

	  //percent = ((float)adcVal/4000)*100;
	  sprintf(txt,"%d", (int) value);
 800144e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001452:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001454:	4973      	ldr	r1, [pc, #460]	; (8001624 <main+0x22c>)
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fb9c 	bl	8003b94 <siprintf>
	  if (display_state == 1){
 800145c:	4b72      	ldr	r3, [pc, #456]	; (8001628 <main+0x230>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d115      	bne.n	8001490 <main+0x98>
		  lcd_clear();
 8001464:	f7ff ff1a 	bl	800129c <lcd_clear>
		  lcd_printf("Level:");
 8001468:	4870      	ldr	r0, [pc, #448]	; (800162c <main+0x234>)
 800146a:	f7ff ff21 	bl	80012b0 <lcd_printf>
		  lcd_setCursor(0,7);
 800146e:	2107      	movs	r1, #7
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff feb7 	bl	80011e4 <lcd_setCursor>
		  lcd_printf(txt);
 8001476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff18 	bl	80012b0 <lcd_printf>
		  lcd_setCursor(0, 10);
 8001480:	210a      	movs	r1, #10
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff feae 	bl	80011e4 <lcd_setCursor>
		  lcd_printf("mm");
 8001488:	4869      	ldr	r0, [pc, #420]	; (8001630 <main+0x238>)
 800148a:	f7ff ff11 	bl	80012b0 <lcd_printf>
 800148e:	e04d      	b.n	800152c <main+0x134>
	  } else if (display_state == 0){
 8001490:	4b65      	ldr	r3, [pc, #404]	; (8001628 <main+0x230>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d149      	bne.n	800152c <main+0x134>
		  	  HAL_ADC_Start(&hadc2);
 8001498:	4866      	ldr	r0, [pc, #408]	; (8001634 <main+0x23c>)
 800149a:	f000 fdb1 	bl	8002000 <HAL_ADC_Start>
		  	if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK){
 800149e:	2164      	movs	r1, #100	; 0x64
 80014a0:	4864      	ldr	r0, [pc, #400]	; (8001634 <main+0x23c>)
 80014a2:	f000 feb2 	bl	800220a <HAL_ADC_PollForConversion>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d13f      	bne.n	800152c <main+0x134>
		  		adcVal = HAL_ADC_GetValue(&hadc2);
 80014ac:	4861      	ldr	r0, [pc, #388]	; (8001634 <main+0x23c>)
 80014ae:	f000 ff37 	bl	8002320 <HAL_ADC_GetValue>
 80014b2:	4603      	mov	r3, r0
 80014b4:	66fb      	str	r3, [r7, #108]	; 0x6c

		  		voltageOut = (adcVal*500)/4096.0;
 80014b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f82f 	bl	8000524 <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <main+0x240>)
 80014cc:	f7ff f9be 	bl	800084c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff faa0 	bl	8000a1c <__aeabi_d2iz>
 80014dc:	4603      	mov	r3, r0
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
		  		temp = (voltageOut/5);
 80014e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e2:	4a56      	ldr	r2, [pc, #344]	; (800163c <main+0x244>)
 80014e4:	fb82 1203 	smull	r1, r2, r2, r3
 80014e8:	1052      	asrs	r2, r2, #1
 80014ea:	17db      	asrs	r3, r3, #31
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4a54      	ldr	r2, [pc, #336]	; (8001640 <main+0x248>)
 80014f0:	6013      	str	r3, [r2, #0]

		  		//quotient = temp/10;
		  		//remainder = temp % 10;
		  		//tempA = quotient + 0x30;
		  		sprintf(txt1,"%d", temp);
 80014f2:	4b53      	ldr	r3, [pc, #332]	; (8001640 <main+0x248>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	494a      	ldr	r1, [pc, #296]	; (8001624 <main+0x22c>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fb49 	bl	8003b94 <siprintf>
		  		lcd_clear();
 8001502:	f7ff fecb 	bl	800129c <lcd_clear>
		  		lcd_printf("Temp:");
 8001506:	484f      	ldr	r0, [pc, #316]	; (8001644 <main+0x24c>)
 8001508:	f7ff fed2 	bl	80012b0 <lcd_printf>
		  		lcd_setCursor(0,7);
 800150c:	2107      	movs	r1, #7
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fe68 	bl	80011e4 <lcd_setCursor>
		  		lcd_printf(txt1);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fec9 	bl	80012b0 <lcd_printf>
		  		lcd_setCursor(0, 10);
 800151e:	210a      	movs	r1, #10
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fe5f 	bl	80011e4 <lcd_setCursor>
		  		lcd_printf("C");
 8001526:	4848      	ldr	r0, [pc, #288]	; (8001648 <main+0x250>)
 8001528:	f7ff fec2 	bl	80012b0 <lcd_printf>
		  	//	HAL_ADC_Stop(&hadc2);
		  		//HAL_Delay(500);
		  	}

	  }
	  if (display_state == 2){
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <main+0x230>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d125      	bne.n	8001580 <main+0x188>
		lcd_clear();
 8001534:	f7ff feb2 	bl	800129c <lcd_clear>
		lcd_printf("1");
 8001538:	4844      	ldr	r0, [pc, #272]	; (800164c <main+0x254>)
 800153a:	f7ff feb9 	bl	80012b0 <lcd_printf>
		lcd_setCursor(0,5);
 800153e:	2105      	movs	r1, #5
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fe4f 	bl	80011e4 <lcd_setCursor>
		lcd_printf("2");
 8001546:	4842      	ldr	r0, [pc, #264]	; (8001650 <main+0x258>)
 8001548:	f7ff feb2 	bl	80012b0 <lcd_printf>
		lcd_setCursor(0,10);
 800154c:	210a      	movs	r1, #10
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fe48 	bl	80011e4 <lcd_setCursor>
		lcd_printf("3");
 8001554:	483f      	ldr	r0, [pc, #252]	; (8001654 <main+0x25c>)
 8001556:	f7ff feab 	bl	80012b0 <lcd_printf>
		lcd_2ndLine();
 800155a:	f7ff fe6f 	bl	800123c <lcd_2ndLine>
		lcd_printf("40");
 800155e:	483e      	ldr	r0, [pc, #248]	; (8001658 <main+0x260>)
 8001560:	f7ff fea6 	bl	80012b0 <lcd_printf>
		lcd_setCursor(1, 5);
 8001564:	2105      	movs	r1, #5
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fe3c 	bl	80011e4 <lcd_setCursor>
		lcd_printf("30");
 800156c:	483b      	ldr	r0, [pc, #236]	; (800165c <main+0x264>)
 800156e:	f7ff fe9f 	bl	80012b0 <lcd_printf>
		lcd_setCursor(1, 10);
 8001572:	210a      	movs	r1, #10
 8001574:	2001      	movs	r0, #1
 8001576:	f7ff fe35 	bl	80011e4 <lcd_setCursor>
		lcd_printf("20");
 800157a:	4839      	ldr	r0, [pc, #228]	; (8001660 <main+0x268>)
 800157c:	f7ff fe98 	bl	80012b0 <lcd_printf>
	  }
	  if (display_state == 3){
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <main+0x230>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d11a      	bne.n	80015be <main+0x1c6>
		  lcd_clear();
 8001588:	f7ff fe88 	bl	800129c <lcd_clear>
		  lcd_printf("Max Level: ");
 800158c:	4835      	ldr	r0, [pc, #212]	; (8001664 <main+0x26c>)
 800158e:	f7ff fe8f 	bl	80012b0 <lcd_printf>
		  lcd_setCursor(0,12);
 8001592:	210c      	movs	r1, #12
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fe25 	bl	80011e4 <lcd_setCursor>
		  sprintf(txt2,"%d", input);
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <main+0x270>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4920      	ldr	r1, [pc, #128]	; (8001624 <main+0x22c>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 faf6 	bl	8003b94 <siprintf>
		  lcd_printf(txt2);
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fe80 	bl	80012b0 <lcd_printf>
		  display_state = 1;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <main+0x230>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f000 fcb9 	bl	8001f30 <HAL_Delay>
	  }
	  if (value >= input) {
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <main+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80015c4:	429a      	cmp	r2, r3
 80015c6:	db0b      	blt.n	80015e0 <main+0x1e8>
		  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2104      	movs	r1, #4
 80015cc:	4827      	ldr	r0, [pc, #156]	; (800166c <main+0x274>)
 80015ce:	f001 fb81 	bl	8002cd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(test_led_GPIO_Port, test_led_Pin, 1);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d8:	4825      	ldr	r0, [pc, #148]	; (8001670 <main+0x278>)
 80015da:	f001 fb7b 	bl	8002cd4 <HAL_GPIO_WritePin>
 80015de:	e00a      	b.n	80015f6 <main+0x1fe>
	  } else {
		  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2104      	movs	r1, #4
 80015e4:	4821      	ldr	r0, [pc, #132]	; (800166c <main+0x274>)
 80015e6:	f001 fb75 	bl	8002cd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(test_led_GPIO_Port, test_led_Pin, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f0:	481f      	ldr	r0, [pc, #124]	; (8001670 <main+0x278>)
 80015f2:	f001 fb6f 	bl	8002cd4 <HAL_GPIO_WritePin>
	  }
	  if (temp < 25) {
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <main+0x248>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b18      	cmp	r3, #24
 80015fc:	dc05      	bgt.n	800160a <main+0x212>
		  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	2110      	movs	r1, #16
 8001602:	481a      	ldr	r0, [pc, #104]	; (800166c <main+0x274>)
 8001604:	f001 fb66 	bl	8002cd4 <HAL_GPIO_WritePin>
 8001608:	e71e      	b.n	8001448 <main+0x50>
	  }else if (temp > 35) {
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <main+0x248>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b23      	cmp	r3, #35	; 0x23
 8001610:	f77f af1a 	ble.w	8001448 <main+0x50>
		  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2110      	movs	r1, #16
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <main+0x274>)
 800161a:	f001 fb5b 	bl	8002cd4 <HAL_GPIO_WritePin>
	value = ADCConfig();
 800161e:	e713      	b.n	8001448 <main+0x50>
 8001620:	40021000 	.word	0x40021000
 8001624:	0800450c 	.word	0x0800450c
 8001628:	20000004 	.word	0x20000004
 800162c:	08004510 	.word	0x08004510
 8001630:	08004518 	.word	0x08004518
 8001634:	20000104 	.word	0x20000104
 8001638:	40b00000 	.word	0x40b00000
 800163c:	66666667 	.word	0x66666667
 8001640:	200000b8 	.word	0x200000b8
 8001644:	0800451c 	.word	0x0800451c
 8001648:	08004524 	.word	0x08004524
 800164c:	08004528 	.word	0x08004528
 8001650:	0800452c 	.word	0x0800452c
 8001654:	08004530 	.word	0x08004530
 8001658:	08004534 	.word	0x08004534
 800165c:	08004538 	.word	0x08004538
 8001660:	0800453c 	.word	0x0800453c
 8001664:	08004540 	.word	0x08004540
 8001668:	20000008 	.word	0x20000008
 800166c:	40020000 	.word	0x40020000
 8001670:	40020c00 	.word	0x40020c00

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	; 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2230      	movs	r2, #48	; 0x30
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fa7e 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <SystemClock_Config+0xc8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <SystemClock_Config+0xc8>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <SystemClock_Config+0xc8>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <SystemClock_Config+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a20      	ldr	r2, [pc, #128]	; (8001740 <SystemClock_Config+0xcc>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <SystemClock_Config+0xcc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d0:	2302      	movs	r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d8:	2310      	movs	r3, #16
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016dc:	2302      	movs	r3, #2
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e4:	2308      	movs	r3, #8
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016e8:	2348      	movs	r3, #72	; 0x48
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f0:	2304      	movs	r3, #4
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 fb1d 	bl	8002d38 <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001704:	f000 fa26 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fd7f 	bl	8003228 <HAL_RCC_ClockConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001730:	f000 fa10 	bl	8001b54 <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3750      	adds	r7, #80	; 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_ADC1_Init+0x98>)
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <MX_ADC1_Init+0x9c>)
 800175a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_ADC1_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_ADC1_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_ADC1_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_ADC1_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_ADC1_Init+0x98>)
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <MX_ADC1_Init+0xa0>)
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_ADC1_Init+0x98>)
 8001790:	2201      	movs	r2, #1
 8001792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_ADC1_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_ADC1_Init+0x98>)
 800179e:	2201      	movs	r2, #1
 80017a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_ADC1_Init+0x98>)
 80017a4:	f000 fbe8 	bl	8001f78 <HAL_ADC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017ae:	f000 f9d1 	bl	8001b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <MX_ADC1_Init+0x98>)
 80017c4:	f000 fdba 	bl	800233c <HAL_ADC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017ce:	f000 f9c1 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000bc 	.word	0x200000bc
 80017e0:	40012000 	.word	0x40012000
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ee:	463b      	mov	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_ADC2_Init+0x98>)
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <MX_ADC2_Init+0x9c>)
 80017fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_ADC2_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_ADC2_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_ADC2_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_ADC2_Init+0x98>)
 8001814:	2200      	movs	r2, #0
 8001816:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_ADC2_Init+0x98>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_ADC2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_ADC2_Init+0x98>)
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <MX_ADC2_Init+0xa0>)
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_ADC2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_ADC2_Init+0x98>)
 8001834:	2201      	movs	r2, #1
 8001836:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_ADC2_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_ADC2_Init+0x98>)
 8001842:	2201      	movs	r2, #1
 8001844:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MX_ADC2_Init+0x98>)
 8001848:	f000 fb96 	bl	8001f78 <HAL_ADC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001852:	f000 f97f 	bl	8001b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001856:	2303      	movs	r3, #3
 8001858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800185a:	2301      	movs	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_ADC2_Init+0x98>)
 8001868:	f000 fd68 	bl	800233c <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001872:	f000 f96f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000104 	.word	0x20000104
 8001884:	40012100 	.word	0x40012100
 8001888:	0f000001 	.word	0x0f000001

0800188c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_TIM1_Init+0x98>)
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <MX_TIM1_Init+0x9c>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_TIM1_Init+0x98>)
 80018b0:	2247      	movs	r2, #71	; 0x47
 80018b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_TIM1_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_TIM1_Init+0x98>)
 80018bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_TIM1_Init+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_TIM1_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_TIM1_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <MX_TIM1_Init+0x98>)
 80018d6:	f001 fe5f 	bl	8003598 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018e0:	f000 f938 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_TIM1_Init+0x98>)
 80018f2:	f001 fea0 	bl	8003636 <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018fc:	f000 f92a 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001908:	463b      	mov	r3, r7
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_TIM1_Init+0x98>)
 800190e:	f002 f893 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001918:	f000 f91c 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000014c 	.word	0x2000014c
 8001928:	40010000 	.word	0x40010000

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a64      	ldr	r2, [pc, #400]	; (8001adc <MX_GPIO_Init+0x1b0>)
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b62      	ldr	r3, [pc, #392]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <MX_GPIO_Init+0x1b0>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <MX_GPIO_Init+0x1b0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b50      	ldr	r3, [pc, #320]	; (8001adc <MX_GPIO_Init+0x1b0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <MX_GPIO_Init+0x1b0>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <MX_GPIO_Init+0x1b0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <MX_GPIO_Init+0x1b0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a48      	ldr	r2, [pc, #288]	; (8001adc <MX_GPIO_Init+0x1b0>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <MX_GPIO_Init+0x1b0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D5_Pin|EN_Pin|D6_Pin|D7_Pin
 80019ce:	2200      	movs	r2, #0
 80019d0:	215f      	movs	r1, #95	; 0x5f
 80019d2:	4843      	ldr	r0, [pc, #268]	; (8001ae0 <MX_GPIO_Init+0x1b4>)
 80019d4:	f001 f97e 	bl	8002cd4 <HAL_GPIO_WritePin>
                          |D4_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|Heater_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2114      	movs	r1, #20
 80019dc:	4841      	ldr	r0, [pc, #260]	; (8001ae4 <MX_GPIO_Init+0x1b8>)
 80019de:	f001 f979 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_led_GPIO_Port, test_led_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	483f      	ldr	r0, [pc, #252]	; (8001ae8 <MX_GPIO_Init+0x1bc>)
 80019ea:	f001 f973 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D5_Pin EN_Pin D6_Pin D7_Pin
                           D4_Pin RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|EN_Pin|D6_Pin|D7_Pin
 80019ee:	235f      	movs	r3, #95	; 0x5f
 80019f0:	617b      	str	r3, [r7, #20]
                          |D4_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4836      	ldr	r0, [pc, #216]	; (8001ae0 <MX_GPIO_Init+0x1b4>)
 8001a06:	f000 ffc9 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BTN_Pin */
  GPIO_InitStruct.Pin = LCD_BTN_Pin;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4830      	ldr	r0, [pc, #192]	; (8001ae0 <MX_GPIO_Init+0x1b4>)
 8001a20:	f000 ffbc 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : Choice_1_Pin Choice_2_Pin */
  GPIO_InitStruct.Pin = Choice_1_Pin|Choice_2_Pin;
 8001a24:	2303      	movs	r3, #3
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	482c      	ldr	r0, [pc, #176]	; (8001aec <MX_GPIO_Init+0x1c0>)
 8001a3a:	f000 ffaf 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : Choice_3_Pin */
  GPIO_InitStruct.Pin = Choice_3_Pin;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Choice_3_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4826      	ldr	r0, [pc, #152]	; (8001aec <MX_GPIO_Init+0x1c0>)
 8001a54:	f000 ffa2 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin Heater_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Heater_Pin;
 8001a58:	2314      	movs	r3, #20
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <MX_GPIO_Init+0x1b8>)
 8001a70:	f000 ff94 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : test_led_Pin */
  GPIO_InitStruct.Pin = test_led_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(test_led_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <MX_GPIO_Init+0x1bc>)
 8001a8e:	f000 ff85 	bl	800299c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2006      	movs	r0, #6
 8001a98:	f000 ff49 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a9c:	2006      	movs	r0, #6
 8001a9e:	f000 ff62 	bl	8002966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2007      	movs	r0, #7
 8001aa8:	f000 ff41 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001aac:	2007      	movs	r0, #7
 8001aae:	f000 ff5a 	bl	8002966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2008      	movs	r0, #8
 8001ab8:	f000 ff39 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001abc:	2008      	movs	r0, #8
 8001abe:	f000 ff52 	bl	8002966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2017      	movs	r0, #23
 8001ac8:	f000 ff31 	bl	800292e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001acc:	2017      	movs	r0, #23
 8001ace:	f000 ff4a 	bl	8002966 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40020800 	.word	0x40020800

08001af0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LCD_BTN_Pin ){
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d110      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0x32>
		//HAL_GPIO_TogglePin(test_led_GPIO_Port, test_led_Pin);
		//HAL_GPIO_WritePin(test_led_GPIO_Port, test_led_Pin, 1);
		if (display_state == 1){
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d109      	bne.n	8001b1c <HAL_GPIO_EXTI_Callback+0x2c>
		//	lcd_clear();
			HAL_GPIO_WritePin(test_led_GPIO_Port, test_led_Pin, 1);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0e:	480f      	ldr	r0, [pc, #60]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b10:	f001 f8e0 	bl	8002cd4 <HAL_GPIO_WritePin>
			//lcd_printf("Temp:");
			display_state = 0;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_EXTI_Callback+0x32>
		else{
			//HAL_GPIO_TogglePin(test_led_GPIO_Port, test_led_Pin);
			//lcd_clear();
			//HAL_GPIO_WritePin(test_led_GPIO_Port, test_led_Pin, 0);
			//lcd_printf("Level:");
			display_state = 1;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == Choice_1_Pin){
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_GPIO_EXTI_Callback+0x3e>
		//HAL_GPIO_TogglePin(test_led_GPIO_Port, test_led_Pin);
		//lcd_clear();
		display_state = 2;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1000);
	}
	if (GPIO_Pin == Choice_2_Pin) {
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_EXTI_Callback+0x50>
		input = 40;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b36:	2228      	movs	r2, #40	; 0x28
 8001b38:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(test_led_GPIO_Port, test_led_Pin);
		//HAL_Delay(1000);
		display_state = 3;
 8001b3a:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	601a      	str	r2, [r3, #0]
//	}
//	if (GPIO_Pin == Choice_4_Pin){
//		input = 20;
//		display_state = 3;
//	}
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	20000008 	.word	0x20000008

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_MspInit+0x4c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_MspInit+0x4c>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	; (8001c88 <HAL_ADC_MspInit+0xd8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d128      	bne.n	8001c24 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a2c      	ldr	r2, [pc, #176]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481c      	ldr	r0, [pc, #112]	; (8001c90 <HAL_ADC_MspInit+0xe0>)
 8001c1e:	f000 febd 	bl	800299c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c22:	e02c      	b.n	8001c7e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_ADC_MspInit+0xe4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d127      	bne.n	8001c7e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_ADC_MspInit+0xdc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c66:	2308      	movs	r3, #8
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <HAL_ADC_MspInit+0xe0>)
 8001c7a:	f000 fe8f 	bl	800299c <HAL_GPIO_Init>
}
 8001c7e:	bf00      	nop
 8001c80:	3730      	adds	r7, #48	; 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40012000 	.word	0x40012000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40012100 	.word	0x40012100

08001c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x40>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_TIM_Base_MspInit+0x40>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_TIM_Base_MspInit+0x40>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40023800 	.word	0x40023800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f8e2 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Choice_1_Pin);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f000 ffe7 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Choice_2_Pin);
 8001d42:	2002      	movs	r0, #2
 8001d44:	f000 ffe0 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Choice_3_Pin);
 8001d50:	2004      	movs	r0, #4
 8001d52:	f000 ffd9 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_BTN_Pin);
 8001d5e:	2020      	movs	r0, #32
 8001d60:	f000 ffd2 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f001 feca 	bl	8003b30 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20020000 	.word	0x20020000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	20000194 	.word	0x20000194
 8001dd0:	200001b0 	.word	0x200001b0

08001dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e14:	4c0b      	ldr	r4, [pc, #44]	; (8001e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e22:	f7ff ffd7 	bl	8001dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f001 fe89 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff fae5 	bl	80013f8 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e3c:	080045a0 	.word	0x080045a0
  ldr r2, =_sbss
 8001e40:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e44:	200001ac 	.word	0x200001ac

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 fd4f 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fe6e 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fd67 	bl	8002982 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 fd2f 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	20000010 	.word	0x20000010

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000014 	.word	0x20000014
 8001f14:	20000198 	.word	0x20000198

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000198 	.word	0x20000198

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000014 	.word	0x20000014

08001f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e033      	b.n	8001ff6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fe0a 	bl	8001bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fbe:	f023 0302 	bic.w	r3, r3, #2
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fad8 	bl	8002580 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe6:	e001      	b.n	8001fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Start+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e0b2      	b.n	8002180 <HAL_ADC_Start+0x180>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d018      	beq.n	8002062 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_ADC_Start+0x18c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_ADC_Start+0x190>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9a      	lsrs	r2, r3, #18
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d17a      	bne.n	8002166 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800209a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ae:	d106      	bne.n	80020be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f023 0206 	bic.w	r2, r3, #6
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_ADC_Start+0x194>)
 80020ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d12a      	bne.n	800213c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <HAL_ADC_Start+0x198>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d015      	beq.n	800211c <HAL_ADC_Start+0x11c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a29      	ldr	r2, [pc, #164]	; (800219c <HAL_ADC_Start+0x19c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d105      	bne.n	8002106 <HAL_ADC_Start+0x106>
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_ADC_Start+0x194>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <HAL_ADC_Start+0x1a0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d136      	bne.n	800217e <HAL_ADC_Start+0x17e>
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_ADC_Start+0x194>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d130      	bne.n	800217e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d129      	bne.n	800217e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	e020      	b.n	800217e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_ADC_Start+0x198>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11b      	bne.n	800217e <HAL_ADC_Start+0x17e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d114      	bne.n	800217e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	e00b      	b.n	800217e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f043 0210 	orr.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	2000000c 	.word	0x2000000c
 8002190:	431bde83 	.word	0x431bde83
 8002194:	40012300 	.word	0x40012300
 8002198:	40012000 	.word	0x40012000
 800219c:	40012100 	.word	0x40012100
 80021a0:	40012200 	.word	0x40012200

080021a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Stop+0x16>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e021      	b.n	80021fe <HAL_ADC_Stop+0x5a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d113      	bne.n	8002250 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002236:	d10b      	bne.n	8002250 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e063      	b.n	8002318 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002250:	f7ff fe62 	bl	8001f18 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002256:	e021      	b.n	800229c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d01d      	beq.n	800229c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_ADC_PollForConversion+0x6c>
 8002266:	f7ff fe57 	bl	8001f18 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d212      	bcs.n	800229c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d00b      	beq.n	800229c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e03d      	b.n	8002318 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d1d6      	bne.n	8002258 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f06f 0212 	mvn.w	r2, #18
 80022b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d123      	bne.n	8002316 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11f      	bne.n	8002316 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d111      	bne.n	8002316 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1c>
 8002354:	2302      	movs	r3, #2
 8002356:	e105      	b.n	8002564 <HAL_ADC_ConfigChannel+0x228>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d925      	bls.n	80023b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	3b1e      	subs	r3, #30
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4403      	add	r3, r0
 80023a6:	3b1e      	subs	r3, #30
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	e022      	b.n	80023fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	2207      	movs	r2, #7
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	400a      	ands	r2, r1
 80023d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4403      	add	r3, r0
 80023f0:	409a      	lsls	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d824      	bhi.n	800244c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b05      	subs	r3, #5
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b05      	subs	r3, #5
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
 800244a:	e04c      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d824      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b23      	subs	r3, #35	; 0x23
 8002466:	221f      	movs	r2, #31
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43da      	mvns	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	400a      	ands	r2, r1
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b23      	subs	r3, #35	; 0x23
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
 800249c:	e023      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b41      	subs	r3, #65	; 0x41
 80024b0:	221f      	movs	r2, #31
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b41      	subs	r3, #65	; 0x41
 80024da:	fa00 f203 	lsl.w	r2, r0, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_ADC_ConfigChannel+0x234>)
 80024e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a21      	ldr	r2, [pc, #132]	; (8002574 <HAL_ADC_ConfigChannel+0x238>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d109      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1cc>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_ADC_ConfigChannel+0x238>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d123      	bne.n	800255a <HAL_ADC_ConfigChannel+0x21e>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b10      	cmp	r3, #16
 8002518:	d003      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x1e6>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b11      	cmp	r3, #17
 8002520:	d11b      	bne.n	800255a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d111      	bne.n	800255a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_ADC_ConfigChannel+0x23c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_ADC_ConfigChannel+0x240>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	0c9a      	lsrs	r2, r3, #18
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800254c:	e002      	b.n	8002554 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3b01      	subs	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f9      	bne.n	800254e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40012300 	.word	0x40012300
 8002574:	40012000 	.word	0x40012000
 8002578:	2000000c 	.word	0x2000000c
 800257c:	431bde83 	.word	0x431bde83

08002580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <ADC_Init+0x1f0>)
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	021a      	lsls	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <ADC_Init+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	e00f      	b.n	800267e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800267c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0202 	bic.w	r2, r2, #2
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e1b      	ldrb	r3, [r3, #24]
 8002698:	005a      	lsls	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	3b01      	subs	r3, #1
 80026d8:	035a      	lsls	r2, r3, #13
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e007      	b.n	80026f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	3b01      	subs	r3, #1
 8002710:	051a      	lsls	r2, r3, #20
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002736:	025a      	lsls	r2, r3, #9
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	029a      	lsls	r2, r3, #10
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40012300 	.word	0x40012300
 8002774:	0f000001 	.word	0x0f000001

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff8e 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff29 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff3e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff8e 	bl	800286c <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5d 	bl	8002818 <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff31 	bl	80027dc <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e16b      	b.n	8002c90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f040 815a 	bne.w	8002c8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d005      	beq.n	80029ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d130      	bne.n	8002a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 0201 	and.w	r2, r3, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d017      	beq.n	8002a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d123      	bne.n	8002ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	220f      	movs	r2, #15
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80b4 	beq.w	8002c8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b60      	ldr	r3, [pc, #384]	; (8002ca8 <HAL_GPIO_Init+0x30c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ca8 <HAL_GPIO_Init+0x30c>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <HAL_GPIO_Init+0x30c>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3e:	4a5b      	ldr	r2, [pc, #364]	; (8002cac <HAL_GPIO_Init+0x310>)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_GPIO_Init+0x314>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02b      	beq.n	8002bc2 <HAL_GPIO_Init+0x226>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a51      	ldr	r2, [pc, #324]	; (8002cb4 <HAL_GPIO_Init+0x318>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x222>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a50      	ldr	r2, [pc, #320]	; (8002cb8 <HAL_GPIO_Init+0x31c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x21e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4f      	ldr	r2, [pc, #316]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x21a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4e      	ldr	r2, [pc, #312]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x216>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_GPIO_Init+0x328>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x212>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_GPIO_Init+0x32c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x20e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <HAL_GPIO_Init+0x330>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x20a>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e00e      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	e00c      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002baa:	2306      	movs	r3, #6
 8002bac:	e00a      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002bae:	2305      	movs	r3, #5
 8002bb0:	e008      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e004      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e002      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x228>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f002 0203 	and.w	r2, r2, #3
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd4:	4935      	ldr	r1, [pc, #212]	; (8002cac <HAL_GPIO_Init+0x310>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c06:	4a32      	ldr	r2, [pc, #200]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c84:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_GPIO_Init+0x334>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	f67f ae90 	bls.w	80029b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40013800 	.word	0x40013800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020c00 	.word	0x40020c00
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40021400 	.word	0x40021400
 8002cc8:	40021800 	.word	0x40021800
 8002ccc:	40021c00 	.word	0x40021c00
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fee2 	bl	8001af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e267      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d075      	beq.n	8002e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d00c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d112      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7a:	d10b      	bne.n	8002d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d05b      	beq.n	8002e40 <HAL_RCC_OscConfig+0x108>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d157      	bne.n	8002e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e242      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_OscConfig+0x74>
 8002d9e:	4b76      	ldr	r3, [pc, #472]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a75      	ldr	r2, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x98>
 8002db6:	4b70      	ldr	r3, [pc, #448]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6f      	ldr	r2, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xb0>
 8002dd0:	4b69      	ldr	r3, [pc, #420]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff f892 	bl	8001f18 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff f88e 	bl	8001f18 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e207      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xc0>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff f87e 	bl	8001f18 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff f87a 	bl	8001f18 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1f3      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0xe8>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1c7      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4937      	ldr	r1, [pc, #220]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <HAL_RCC_OscConfig+0x244>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7ff f833 	bl	8001f18 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7ff f82f 	bl	8001f18 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1a8      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4925      	ldr	r1, [pc, #148]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_OscConfig+0x244>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f812 	bl	8001f18 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f80e 	bl	8001f18 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e187      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d036      	beq.n	8002f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x248>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fff2 	bl	8001f18 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe ffee 	bl	8001f18 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e167      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x200>
 8002f56:	e01b      	b.n	8002f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x248>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe ffdb 	bl	8001f18 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	e00e      	b.n	8002f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f66:	f7fe ffd7 	bl	8001f18 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d907      	bls.n	8002f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e150      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	42470000 	.word	0x42470000
 8002f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ea      	bne.n	8002f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8097 	beq.w	80030cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10f      	bne.n	8002fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a7c      	ldr	r2, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b7a      	ldr	r3, [pc, #488]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b77      	ldr	r3, [pc, #476]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b74      	ldr	r3, [pc, #464]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe ff97 	bl	8001f18 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7fe ff93 	bl	8001f18 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e10c      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x474>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x2ea>
 8003014:	4b64      	ldr	r3, [pc, #400]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a63      	ldr	r2, [pc, #396]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	e01c      	b.n	800305c <HAL_RCC_OscConfig+0x324>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x30c>
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a5e      	ldr	r2, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	4a5b      	ldr	r2, [pc, #364]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	; 0x70
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0x324>
 8003044:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a57      	ldr	r2, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe ff58 	bl	8001f18 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00a      	b.n	8003082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe ff54 	bl	8001f18 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0cb      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCC_OscConfig+0x334>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003090:	f7fe ff42 	bl	8001f18 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe ff3e 	bl	8001f18 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0b5      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1ee      	bne.n	8003098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a1 	beq.w	8003218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d05c      	beq.n	800319c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d141      	bne.n	800316e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x478>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe ff12 	bl	8001f18 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe ff0e 	bl	8001f18 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e087      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	491b      	ldr	r1, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x478>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fee7 	bl	8001f18 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fee3 	bl	8001f18 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e05c      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x416>
 800316c:	e054      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_OscConfig+0x478>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fed0 	bl	8001f18 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fecc 	bl	8001f18 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e045      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_OscConfig+0x470>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x444>
 800319a:	e03d      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e038      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x4ec>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d028      	beq.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d121      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d11a      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d111      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0cc      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b68      	ldr	r3, [pc, #416]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d90c      	bls.n	8003264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b63      	ldr	r3, [pc, #396]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003294:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a52      	ldr	r2, [pc, #328]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800329e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b50      	ldr	r3, [pc, #320]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	494d      	ldr	r1, [pc, #308]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d044      	beq.n	8003348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d119      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e07f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e067      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003306:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4934      	ldr	r1, [pc, #208]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003318:	f7fe fdfe 	bl	8001f18 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	e00a      	b.n	8003336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003320:	f7fe fdfa 	bl	8001f18 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e04f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 020c 	and.w	r2, r3, #12
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	429a      	cmp	r2, r3
 8003346:	d1eb      	bne.n	8003320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d20c      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e032      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4916      	ldr	r1, [pc, #88]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490e      	ldr	r1, [pc, #56]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f821 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490a      	ldr	r1, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fd5e 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00
 80033e4:	40023800 	.word	0x40023800
 80033e8:	0800454c 	.word	0x0800454c
 80033ec:	2000000c 	.word	0x2000000c
 80033f0:	20000010 	.word	0x20000010

080033f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f8:	b090      	sub	sp, #64	; 0x40
 80033fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003400:	2300      	movs	r3, #0
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003404:	2300      	movs	r3, #0
 8003406:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800340c:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d00d      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x40>
 8003418:	2b08      	cmp	r3, #8
 800341a:	f200 80a1 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x16c>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x34>
 8003422:	2b04      	cmp	r3, #4
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x3a>
 8003426:	e09b      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_GetSysClockFreq+0x184>)
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800342c:	e09b      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342e:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003432:	e098      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343e:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d028      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344a:	4b4a      	ldr	r3, [pc, #296]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	2200      	movs	r2, #0
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	627a      	str	r2, [r7, #36]	; 0x24
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800345c:	2100      	movs	r1, #0
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 8003460:	fb03 f201 	mul.w	r2, r3, r1
 8003464:	2300      	movs	r3, #0
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	4413      	add	r3, r2
 800346c:	4a43      	ldr	r2, [pc, #268]	; (800357c <HAL_RCC_GetSysClockFreq+0x188>)
 800346e:	fba0 1202 	umull	r1, r2, r0, r2
 8003472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003474:	460a      	mov	r2, r1
 8003476:	62ba      	str	r2, [r7, #40]	; 0x28
 8003478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347a:	4413      	add	r3, r2
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	2200      	movs	r2, #0
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	61fa      	str	r2, [r7, #28]
 8003486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800348e:	f7fd faed 	bl	8000a6c <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4613      	mov	r3, r2
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349a:	e053      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349c:	4b35      	ldr	r3, [pc, #212]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	2200      	movs	r2, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	617a      	str	r2, [r7, #20]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034ae:	f04f 0b00 	mov.w	fp, #0
 80034b2:	4652      	mov	r2, sl
 80034b4:	465b      	mov	r3, fp
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	0159      	lsls	r1, r3, #5
 80034c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c4:	0150      	lsls	r0, r2, #5
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	ebb2 080a 	subs.w	r8, r2, sl
 80034ce:	eb63 090b 	sbc.w	r9, r3, fp
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034e6:	ebb2 0408 	subs.w	r4, r2, r8
 80034ea:	eb63 0509 	sbc.w	r5, r3, r9
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	00eb      	lsls	r3, r5, #3
 80034f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fc:	00e2      	lsls	r2, r4, #3
 80034fe:	4614      	mov	r4, r2
 8003500:	461d      	mov	r5, r3
 8003502:	eb14 030a 	adds.w	r3, r4, sl
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	eb45 030b 	adc.w	r3, r5, fp
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351a:	4629      	mov	r1, r5
 800351c:	028b      	lsls	r3, r1, #10
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003524:	4621      	mov	r1, r4
 8003526:	028a      	lsls	r2, r1, #10
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352e:	2200      	movs	r2, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	60fa      	str	r2, [r7, #12]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	f7fd fa98 	bl	8000a6c <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x184>)
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003568:	4618      	mov	r0, r3
 800356a:	3740      	adds	r7, #64	; 0x40
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	017d7840 	.word	0x017d7840

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_RCC_GetHCLKFreq+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	2000000c 	.word	0x2000000c

08003598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e041      	b.n	800362e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe fb6a 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 f8f4 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_TIM_ConfigClockSource+0x1c>
 800364e:	2302      	movs	r3, #2
 8003650:	e0b4      	b.n	80037bc <HAL_TIM_ConfigClockSource+0x186>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003670:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003678:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368a:	d03e      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xd4>
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003690:	f200 8087 	bhi.w	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003698:	f000 8086 	beq.w	80037a8 <HAL_TIM_ConfigClockSource+0x172>
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a0:	d87f      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036a2:	2b70      	cmp	r3, #112	; 0x70
 80036a4:	d01a      	beq.n	80036dc <HAL_TIM_ConfigClockSource+0xa6>
 80036a6:	2b70      	cmp	r3, #112	; 0x70
 80036a8:	d87b      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036aa:	2b60      	cmp	r3, #96	; 0x60
 80036ac:	d050      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0x11a>
 80036ae:	2b60      	cmp	r3, #96	; 0x60
 80036b0:	d877      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036b2:	2b50      	cmp	r3, #80	; 0x50
 80036b4:	d03c      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0xfa>
 80036b6:	2b50      	cmp	r3, #80	; 0x50
 80036b8:	d873      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d058      	beq.n	8003770 <HAL_TIM_ConfigClockSource+0x13a>
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d86f      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036c2:	2b30      	cmp	r3, #48	; 0x30
 80036c4:	d064      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x15a>
 80036c6:	2b30      	cmp	r3, #48	; 0x30
 80036c8:	d86b      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d060      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x15a>
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d867      	bhi.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d05c      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x15a>
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d05a      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x15a>
 80036da:	e062      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f000 f984 	bl	80039f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e04f      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f000 f96d 	bl	80039f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372c:	609a      	str	r2, [r3, #8]
      break;
 800372e:	e03c      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	461a      	mov	r2, r3
 800373e:	f000 f8e1 	bl	8003904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2150      	movs	r1, #80	; 0x50
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f93a 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 800374e:	e02c      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f000 f900 	bl	8003962 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2160      	movs	r1, #96	; 0x60
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f92a 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 800376e:	e01c      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	461a      	mov	r2, r3
 800377e:	f000 f8c1 	bl	8003904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f91a 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 800378e:	e00c      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 f911 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80037a0:	e003      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      break;
 80037a6:	e000      	b.n	80037aa <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a40      	ldr	r2, [pc, #256]	; (80038d8 <TIM_Base_SetConfig+0x114>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d00f      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3d      	ldr	r2, [pc, #244]	; (80038dc <TIM_Base_SetConfig+0x118>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3c      	ldr	r2, [pc, #240]	; (80038e0 <TIM_Base_SetConfig+0x11c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3b      	ldr	r2, [pc, #236]	; (80038e4 <TIM_Base_SetConfig+0x120>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <TIM_Base_SetConfig+0x124>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d108      	bne.n	8003816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <TIM_Base_SetConfig+0x114>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d027      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <TIM_Base_SetConfig+0x118>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d023      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <TIM_Base_SetConfig+0x11c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2a      	ldr	r2, [pc, #168]	; (80038e4 <TIM_Base_SetConfig+0x120>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <TIM_Base_SetConfig+0x124>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d017      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a28      	ldr	r2, [pc, #160]	; (80038ec <TIM_Base_SetConfig+0x128>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <TIM_Base_SetConfig+0x12c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00f      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a26      	ldr	r2, [pc, #152]	; (80038f4 <TIM_Base_SetConfig+0x130>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a25      	ldr	r2, [pc, #148]	; (80038f8 <TIM_Base_SetConfig+0x134>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a24      	ldr	r2, [pc, #144]	; (80038fc <TIM_Base_SetConfig+0x138>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a23      	ldr	r2, [pc, #140]	; (8003900 <TIM_Base_SetConfig+0x13c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <TIM_Base_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0xf8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <TIM_Base_SetConfig+0x124>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40000800 	.word	0x40000800
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	40010400 	.word	0x40010400
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40014400 	.word	0x40014400
 80038f4:	40014800 	.word	0x40014800
 80038f8:	40001800 	.word	0x40001800
 80038fc:	40001c00 	.word	0x40001c00
 8003900:	40002000 	.word	0x40002000

08003904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800392e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f023 030a 	bic.w	r3, r3, #10
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0210 	bic.w	r2, r3, #16
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800398c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800399e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e05a      	b.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d01d      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10c      	bne.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40010400 	.word	0x40010400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40001800 	.word	0x40001800

08003b30 <__errno>:
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <__errno+0x8>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000018 	.word	0x20000018

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	; (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2600      	movs	r6, #0
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4d0b      	ldr	r5, [pc, #44]	; (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	; (8003b80 <__libc_init_array+0x44>)
 8003b50:	f000 fcae 	bl	80044b0 <_init>
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2600      	movs	r6, #0
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08004598 	.word	0x08004598
 8003b78:	08004598 	.word	0x08004598
 8003b7c:	08004598 	.word	0x08004598
 8003b80:	0800459c 	.word	0x0800459c

08003b84 <memset>:
 8003b84:	4402      	add	r2, r0
 8003b86:	4603      	mov	r3, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <siprintf>:
 8003b94:	b40e      	push	{r1, r2, r3}
 8003b96:	b500      	push	{lr}
 8003b98:	b09c      	sub	sp, #112	; 0x70
 8003b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	9006      	str	r0, [sp, #24]
 8003ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <siprintf+0x38>)
 8003ba6:	9107      	str	r1, [sp, #28]
 8003ba8:	9104      	str	r1, [sp, #16]
 8003baa:	4909      	ldr	r1, [pc, #36]	; (8003bd0 <siprintf+0x3c>)
 8003bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bb0:	9105      	str	r1, [sp, #20]
 8003bb2:	6800      	ldr	r0, [r0, #0]
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	a902      	add	r1, sp, #8
 8003bb8:	f000 f888 	bl	8003ccc <_svfiprintf_r>
 8003bbc:	9b02      	ldr	r3, [sp, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	b01c      	add	sp, #112	; 0x70
 8003bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bc8:	b003      	add	sp, #12
 8003bca:	4770      	bx	lr
 8003bcc:	20000018 	.word	0x20000018
 8003bd0:	ffff0208 	.word	0xffff0208

08003bd4 <_vsiprintf_r>:
 8003bd4:	b500      	push	{lr}
 8003bd6:	b09b      	sub	sp, #108	; 0x6c
 8003bd8:	9100      	str	r1, [sp, #0]
 8003bda:	9104      	str	r1, [sp, #16]
 8003bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003be0:	9105      	str	r1, [sp, #20]
 8003be2:	9102      	str	r1, [sp, #8]
 8003be4:	4905      	ldr	r1, [pc, #20]	; (8003bfc <_vsiprintf_r+0x28>)
 8003be6:	9103      	str	r1, [sp, #12]
 8003be8:	4669      	mov	r1, sp
 8003bea:	f000 f86f 	bl	8003ccc <_svfiprintf_r>
 8003bee:	9b00      	ldr	r3, [sp, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	b01b      	add	sp, #108	; 0x6c
 8003bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bfa:	bf00      	nop
 8003bfc:	ffff0208 	.word	0xffff0208

08003c00 <vsiprintf>:
 8003c00:	4613      	mov	r3, r2
 8003c02:	460a      	mov	r2, r1
 8003c04:	4601      	mov	r1, r0
 8003c06:	4802      	ldr	r0, [pc, #8]	; (8003c10 <vsiprintf+0x10>)
 8003c08:	6800      	ldr	r0, [r0, #0]
 8003c0a:	f7ff bfe3 	b.w	8003bd4 <_vsiprintf_r>
 8003c0e:	bf00      	nop
 8003c10:	20000018 	.word	0x20000018

08003c14 <__ssputs_r>:
 8003c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c18:	688e      	ldr	r6, [r1, #8]
 8003c1a:	429e      	cmp	r6, r3
 8003c1c:	4682      	mov	sl, r0
 8003c1e:	460c      	mov	r4, r1
 8003c20:	4690      	mov	r8, r2
 8003c22:	461f      	mov	r7, r3
 8003c24:	d838      	bhi.n	8003c98 <__ssputs_r+0x84>
 8003c26:	898a      	ldrh	r2, [r1, #12]
 8003c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c2c:	d032      	beq.n	8003c94 <__ssputs_r+0x80>
 8003c2e:	6825      	ldr	r5, [r4, #0]
 8003c30:	6909      	ldr	r1, [r1, #16]
 8003c32:	eba5 0901 	sub.w	r9, r5, r1
 8003c36:	6965      	ldr	r5, [r4, #20]
 8003c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c40:	3301      	adds	r3, #1
 8003c42:	444b      	add	r3, r9
 8003c44:	106d      	asrs	r5, r5, #1
 8003c46:	429d      	cmp	r5, r3
 8003c48:	bf38      	it	cc
 8003c4a:	461d      	movcc	r5, r3
 8003c4c:	0553      	lsls	r3, r2, #21
 8003c4e:	d531      	bpl.n	8003cb4 <__ssputs_r+0xa0>
 8003c50:	4629      	mov	r1, r5
 8003c52:	f000 fb63 	bl	800431c <_malloc_r>
 8003c56:	4606      	mov	r6, r0
 8003c58:	b950      	cbnz	r0, 8003c70 <__ssputs_r+0x5c>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	f8ca 3000 	str.w	r3, [sl]
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c70:	6921      	ldr	r1, [r4, #16]
 8003c72:	464a      	mov	r2, r9
 8003c74:	f000 fabe 	bl	80041f4 <memcpy>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c82:	81a3      	strh	r3, [r4, #12]
 8003c84:	6126      	str	r6, [r4, #16]
 8003c86:	6165      	str	r5, [r4, #20]
 8003c88:	444e      	add	r6, r9
 8003c8a:	eba5 0509 	sub.w	r5, r5, r9
 8003c8e:	6026      	str	r6, [r4, #0]
 8003c90:	60a5      	str	r5, [r4, #8]
 8003c92:	463e      	mov	r6, r7
 8003c94:	42be      	cmp	r6, r7
 8003c96:	d900      	bls.n	8003c9a <__ssputs_r+0x86>
 8003c98:	463e      	mov	r6, r7
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	f000 fab6 	bl	8004210 <memmove>
 8003ca4:	68a3      	ldr	r3, [r4, #8]
 8003ca6:	1b9b      	subs	r3, r3, r6
 8003ca8:	60a3      	str	r3, [r4, #8]
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	4433      	add	r3, r6
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	e7db      	b.n	8003c6c <__ssputs_r+0x58>
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	f000 fba5 	bl	8004404 <_realloc_r>
 8003cba:	4606      	mov	r6, r0
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d1e1      	bne.n	8003c84 <__ssputs_r+0x70>
 8003cc0:	6921      	ldr	r1, [r4, #16]
 8003cc2:	4650      	mov	r0, sl
 8003cc4:	f000 fabe 	bl	8004244 <_free_r>
 8003cc8:	e7c7      	b.n	8003c5a <__ssputs_r+0x46>
	...

08003ccc <_svfiprintf_r>:
 8003ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd0:	4698      	mov	r8, r3
 8003cd2:	898b      	ldrh	r3, [r1, #12]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	b09d      	sub	sp, #116	; 0x74
 8003cd8:	4607      	mov	r7, r0
 8003cda:	460d      	mov	r5, r1
 8003cdc:	4614      	mov	r4, r2
 8003cde:	d50e      	bpl.n	8003cfe <_svfiprintf_r+0x32>
 8003ce0:	690b      	ldr	r3, [r1, #16]
 8003ce2:	b963      	cbnz	r3, 8003cfe <_svfiprintf_r+0x32>
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	f000 fb19 	bl	800431c <_malloc_r>
 8003cea:	6028      	str	r0, [r5, #0]
 8003cec:	6128      	str	r0, [r5, #16]
 8003cee:	b920      	cbnz	r0, 8003cfa <_svfiprintf_r+0x2e>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	e0d1      	b.n	8003e9e <_svfiprintf_r+0x1d2>
 8003cfa:	2340      	movs	r3, #64	; 0x40
 8003cfc:	616b      	str	r3, [r5, #20]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9309      	str	r3, [sp, #36]	; 0x24
 8003d02:	2320      	movs	r3, #32
 8003d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0c:	2330      	movs	r3, #48	; 0x30
 8003d0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003eb8 <_svfiprintf_r+0x1ec>
 8003d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d16:	f04f 0901 	mov.w	r9, #1
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	469a      	mov	sl, r3
 8003d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d22:	b10a      	cbz	r2, 8003d28 <_svfiprintf_r+0x5c>
 8003d24:	2a25      	cmp	r2, #37	; 0x25
 8003d26:	d1f9      	bne.n	8003d1c <_svfiprintf_r+0x50>
 8003d28:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2c:	d00b      	beq.n	8003d46 <_svfiprintf_r+0x7a>
 8003d2e:	465b      	mov	r3, fp
 8003d30:	4622      	mov	r2, r4
 8003d32:	4629      	mov	r1, r5
 8003d34:	4638      	mov	r0, r7
 8003d36:	f7ff ff6d 	bl	8003c14 <__ssputs_r>
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	f000 80aa 	beq.w	8003e94 <_svfiprintf_r+0x1c8>
 8003d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d42:	445a      	add	r2, fp
 8003d44:	9209      	str	r2, [sp, #36]	; 0x24
 8003d46:	f89a 3000 	ldrb.w	r3, [sl]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80a2 	beq.w	8003e94 <_svfiprintf_r+0x1c8>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d5a:	f10a 0a01 	add.w	sl, sl, #1
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	9307      	str	r3, [sp, #28]
 8003d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d66:	931a      	str	r3, [sp, #104]	; 0x68
 8003d68:	4654      	mov	r4, sl
 8003d6a:	2205      	movs	r2, #5
 8003d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d70:	4851      	ldr	r0, [pc, #324]	; (8003eb8 <_svfiprintf_r+0x1ec>)
 8003d72:	f7fc fa35 	bl	80001e0 <memchr>
 8003d76:	9a04      	ldr	r2, [sp, #16]
 8003d78:	b9d8      	cbnz	r0, 8003db2 <_svfiprintf_r+0xe6>
 8003d7a:	06d0      	lsls	r0, r2, #27
 8003d7c:	bf44      	itt	mi
 8003d7e:	2320      	movmi	r3, #32
 8003d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d84:	0711      	lsls	r1, r2, #28
 8003d86:	bf44      	itt	mi
 8003d88:	232b      	movmi	r3, #43	; 0x2b
 8003d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d92:	2b2a      	cmp	r3, #42	; 0x2a
 8003d94:	d015      	beq.n	8003dc2 <_svfiprintf_r+0xf6>
 8003d96:	9a07      	ldr	r2, [sp, #28]
 8003d98:	4654      	mov	r4, sl
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f04f 0c0a 	mov.w	ip, #10
 8003da0:	4621      	mov	r1, r4
 8003da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da6:	3b30      	subs	r3, #48	; 0x30
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d94e      	bls.n	8003e4a <_svfiprintf_r+0x17e>
 8003dac:	b1b0      	cbz	r0, 8003ddc <_svfiprintf_r+0x110>
 8003dae:	9207      	str	r2, [sp, #28]
 8003db0:	e014      	b.n	8003ddc <_svfiprintf_r+0x110>
 8003db2:	eba0 0308 	sub.w	r3, r0, r8
 8003db6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	46a2      	mov	sl, r4
 8003dc0:	e7d2      	b.n	8003d68 <_svfiprintf_r+0x9c>
 8003dc2:	9b03      	ldr	r3, [sp, #12]
 8003dc4:	1d19      	adds	r1, r3, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	9103      	str	r1, [sp, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bfbb      	ittet	lt
 8003dce:	425b      	neglt	r3, r3
 8003dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd4:	9307      	strge	r3, [sp, #28]
 8003dd6:	9307      	strlt	r3, [sp, #28]
 8003dd8:	bfb8      	it	lt
 8003dda:	9204      	strlt	r2, [sp, #16]
 8003ddc:	7823      	ldrb	r3, [r4, #0]
 8003dde:	2b2e      	cmp	r3, #46	; 0x2e
 8003de0:	d10c      	bne.n	8003dfc <_svfiprintf_r+0x130>
 8003de2:	7863      	ldrb	r3, [r4, #1]
 8003de4:	2b2a      	cmp	r3, #42	; 0x2a
 8003de6:	d135      	bne.n	8003e54 <_svfiprintf_r+0x188>
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	9203      	str	r2, [sp, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bfb8      	it	lt
 8003df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df8:	3402      	adds	r4, #2
 8003dfa:	9305      	str	r3, [sp, #20]
 8003dfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ec8 <_svfiprintf_r+0x1fc>
 8003e00:	7821      	ldrb	r1, [r4, #0]
 8003e02:	2203      	movs	r2, #3
 8003e04:	4650      	mov	r0, sl
 8003e06:	f7fc f9eb 	bl	80001e0 <memchr>
 8003e0a:	b140      	cbz	r0, 8003e1e <_svfiprintf_r+0x152>
 8003e0c:	2340      	movs	r3, #64	; 0x40
 8003e0e:	eba0 000a 	sub.w	r0, r0, sl
 8003e12:	fa03 f000 	lsl.w	r0, r3, r0
 8003e16:	9b04      	ldr	r3, [sp, #16]
 8003e18:	4303      	orrs	r3, r0
 8003e1a:	3401      	adds	r4, #1
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e22:	4826      	ldr	r0, [pc, #152]	; (8003ebc <_svfiprintf_r+0x1f0>)
 8003e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e28:	2206      	movs	r2, #6
 8003e2a:	f7fc f9d9 	bl	80001e0 <memchr>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d038      	beq.n	8003ea4 <_svfiprintf_r+0x1d8>
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <_svfiprintf_r+0x1f4>)
 8003e34:	bb1b      	cbnz	r3, 8003e7e <_svfiprintf_r+0x1b2>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	3307      	adds	r3, #7
 8003e3a:	f023 0307 	bic.w	r3, r3, #7
 8003e3e:	3308      	adds	r3, #8
 8003e40:	9303      	str	r3, [sp, #12]
 8003e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e44:	4433      	add	r3, r6
 8003e46:	9309      	str	r3, [sp, #36]	; 0x24
 8003e48:	e767      	b.n	8003d1a <_svfiprintf_r+0x4e>
 8003e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4e:	460c      	mov	r4, r1
 8003e50:	2001      	movs	r0, #1
 8003e52:	e7a5      	b.n	8003da0 <_svfiprintf_r+0xd4>
 8003e54:	2300      	movs	r3, #0
 8003e56:	3401      	adds	r4, #1
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f04f 0c0a 	mov.w	ip, #10
 8003e60:	4620      	mov	r0, r4
 8003e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e66:	3a30      	subs	r2, #48	; 0x30
 8003e68:	2a09      	cmp	r2, #9
 8003e6a:	d903      	bls.n	8003e74 <_svfiprintf_r+0x1a8>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0c5      	beq.n	8003dfc <_svfiprintf_r+0x130>
 8003e70:	9105      	str	r1, [sp, #20]
 8003e72:	e7c3      	b.n	8003dfc <_svfiprintf_r+0x130>
 8003e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e78:	4604      	mov	r4, r0
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e7f0      	b.n	8003e60 <_svfiprintf_r+0x194>
 8003e7e:	ab03      	add	r3, sp, #12
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	462a      	mov	r2, r5
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <_svfiprintf_r+0x1f8>)
 8003e86:	a904      	add	r1, sp, #16
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f3af 8000 	nop.w
 8003e8e:	1c42      	adds	r2, r0, #1
 8003e90:	4606      	mov	r6, r0
 8003e92:	d1d6      	bne.n	8003e42 <_svfiprintf_r+0x176>
 8003e94:	89ab      	ldrh	r3, [r5, #12]
 8003e96:	065b      	lsls	r3, r3, #25
 8003e98:	f53f af2c 	bmi.w	8003cf4 <_svfiprintf_r+0x28>
 8003e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e9e:	b01d      	add	sp, #116	; 0x74
 8003ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea4:	ab03      	add	r3, sp, #12
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <_svfiprintf_r+0x1f8>)
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f000 f87a 	bl	8003fa8 <_printf_i>
 8003eb4:	e7eb      	b.n	8003e8e <_svfiprintf_r+0x1c2>
 8003eb6:	bf00      	nop
 8003eb8:	0800455c 	.word	0x0800455c
 8003ebc:	08004566 	.word	0x08004566
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	08003c15 	.word	0x08003c15
 8003ec8:	08004562 	.word	0x08004562

08003ecc <_printf_common>:
 8003ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	4699      	mov	r9, r3
 8003ed4:	688a      	ldr	r2, [r1, #8]
 8003ed6:	690b      	ldr	r3, [r1, #16]
 8003ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	bfb8      	it	lt
 8003ee0:	4613      	movlt	r3, r2
 8003ee2:	6033      	str	r3, [r6, #0]
 8003ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee8:	4607      	mov	r7, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	b10a      	cbz	r2, 8003ef2 <_printf_common+0x26>
 8003eee:	3301      	adds	r3, #1
 8003ef0:	6033      	str	r3, [r6, #0]
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	0699      	lsls	r1, r3, #26
 8003ef6:	bf42      	ittt	mi
 8003ef8:	6833      	ldrmi	r3, [r6, #0]
 8003efa:	3302      	addmi	r3, #2
 8003efc:	6033      	strmi	r3, [r6, #0]
 8003efe:	6825      	ldr	r5, [r4, #0]
 8003f00:	f015 0506 	ands.w	r5, r5, #6
 8003f04:	d106      	bne.n	8003f14 <_printf_common+0x48>
 8003f06:	f104 0a19 	add.w	sl, r4, #25
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	6832      	ldr	r2, [r6, #0]
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	dc26      	bgt.n	8003f62 <_printf_common+0x96>
 8003f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f18:	1e13      	subs	r3, r2, #0
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	bf18      	it	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	0692      	lsls	r2, r2, #26
 8003f22:	d42b      	bmi.n	8003f7c <_printf_common+0xb0>
 8003f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f28:	4649      	mov	r1, r9
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	47c0      	blx	r8
 8003f2e:	3001      	adds	r0, #1
 8003f30:	d01e      	beq.n	8003f70 <_printf_common+0xa4>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	68e5      	ldr	r5, [r4, #12]
 8003f36:	6832      	ldr	r2, [r6, #0]
 8003f38:	f003 0306 	and.w	r3, r3, #6
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	bf08      	it	eq
 8003f40:	1aad      	subeq	r5, r5, r2
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	bf0c      	ite	eq
 8003f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f4c:	2500      	movne	r5, #0
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	bfc4      	itt	gt
 8003f52:	1a9b      	subgt	r3, r3, r2
 8003f54:	18ed      	addgt	r5, r5, r3
 8003f56:	2600      	movs	r6, #0
 8003f58:	341a      	adds	r4, #26
 8003f5a:	42b5      	cmp	r5, r6
 8003f5c:	d11a      	bne.n	8003f94 <_printf_common+0xc8>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e008      	b.n	8003f74 <_printf_common+0xa8>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4652      	mov	r2, sl
 8003f66:	4649      	mov	r1, r9
 8003f68:	4638      	mov	r0, r7
 8003f6a:	47c0      	blx	r8
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d103      	bne.n	8003f78 <_printf_common+0xac>
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7c6      	b.n	8003f0a <_printf_common+0x3e>
 8003f7c:	18e1      	adds	r1, r4, r3
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	2030      	movs	r0, #48	; 0x30
 8003f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f86:	4422      	add	r2, r4
 8003f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f90:	3302      	adds	r3, #2
 8003f92:	e7c7      	b.n	8003f24 <_printf_common+0x58>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4622      	mov	r2, r4
 8003f98:	4649      	mov	r1, r9
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	47c0      	blx	r8
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d0e6      	beq.n	8003f70 <_printf_common+0xa4>
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e7d9      	b.n	8003f5a <_printf_common+0x8e>
	...

08003fa8 <_printf_i>:
 8003fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	7e0f      	ldrb	r7, [r1, #24]
 8003fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb0:	2f78      	cmp	r7, #120	; 0x78
 8003fb2:	4691      	mov	r9, r2
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	469a      	mov	sl, r3
 8003fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fbe:	d807      	bhi.n	8003fd0 <_printf_i+0x28>
 8003fc0:	2f62      	cmp	r7, #98	; 0x62
 8003fc2:	d80a      	bhi.n	8003fda <_printf_i+0x32>
 8003fc4:	2f00      	cmp	r7, #0
 8003fc6:	f000 80d8 	beq.w	800417a <_printf_i+0x1d2>
 8003fca:	2f58      	cmp	r7, #88	; 0x58
 8003fcc:	f000 80a3 	beq.w	8004116 <_printf_i+0x16e>
 8003fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd8:	e03a      	b.n	8004050 <_printf_i+0xa8>
 8003fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fde:	2b15      	cmp	r3, #21
 8003fe0:	d8f6      	bhi.n	8003fd0 <_printf_i+0x28>
 8003fe2:	a101      	add	r1, pc, #4	; (adr r1, 8003fe8 <_printf_i+0x40>)
 8003fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe8:	08004041 	.word	0x08004041
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	08003fd1 	.word	0x08003fd1
 8003ff4:	08003fd1 	.word	0x08003fd1
 8003ff8:	08003fd1 	.word	0x08003fd1
 8003ffc:	08003fd1 	.word	0x08003fd1
 8004000:	08004055 	.word	0x08004055
 8004004:	08003fd1 	.word	0x08003fd1
 8004008:	08003fd1 	.word	0x08003fd1
 800400c:	08003fd1 	.word	0x08003fd1
 8004010:	08003fd1 	.word	0x08003fd1
 8004014:	08004161 	.word	0x08004161
 8004018:	08004085 	.word	0x08004085
 800401c:	08004143 	.word	0x08004143
 8004020:	08003fd1 	.word	0x08003fd1
 8004024:	08003fd1 	.word	0x08003fd1
 8004028:	08004183 	.word	0x08004183
 800402c:	08003fd1 	.word	0x08003fd1
 8004030:	08004085 	.word	0x08004085
 8004034:	08003fd1 	.word	0x08003fd1
 8004038:	08003fd1 	.word	0x08003fd1
 800403c:	0800414b 	.word	0x0800414b
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	1d1a      	adds	r2, r3, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	602a      	str	r2, [r5, #0]
 8004048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800404c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004050:	2301      	movs	r3, #1
 8004052:	e0a3      	b.n	800419c <_printf_i+0x1f4>
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	6829      	ldr	r1, [r5, #0]
 8004058:	0606      	lsls	r6, r0, #24
 800405a:	f101 0304 	add.w	r3, r1, #4
 800405e:	d50a      	bpl.n	8004076 <_printf_i+0xce>
 8004060:	680e      	ldr	r6, [r1, #0]
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	2e00      	cmp	r6, #0
 8004066:	da03      	bge.n	8004070 <_printf_i+0xc8>
 8004068:	232d      	movs	r3, #45	; 0x2d
 800406a:	4276      	negs	r6, r6
 800406c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004070:	485e      	ldr	r0, [pc, #376]	; (80041ec <_printf_i+0x244>)
 8004072:	230a      	movs	r3, #10
 8004074:	e019      	b.n	80040aa <_printf_i+0x102>
 8004076:	680e      	ldr	r6, [r1, #0]
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800407e:	bf18      	it	ne
 8004080:	b236      	sxthne	r6, r6
 8004082:	e7ef      	b.n	8004064 <_printf_i+0xbc>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	6820      	ldr	r0, [r4, #0]
 8004088:	1d19      	adds	r1, r3, #4
 800408a:	6029      	str	r1, [r5, #0]
 800408c:	0601      	lsls	r1, r0, #24
 800408e:	d501      	bpl.n	8004094 <_printf_i+0xec>
 8004090:	681e      	ldr	r6, [r3, #0]
 8004092:	e002      	b.n	800409a <_printf_i+0xf2>
 8004094:	0646      	lsls	r6, r0, #25
 8004096:	d5fb      	bpl.n	8004090 <_printf_i+0xe8>
 8004098:	881e      	ldrh	r6, [r3, #0]
 800409a:	4854      	ldr	r0, [pc, #336]	; (80041ec <_printf_i+0x244>)
 800409c:	2f6f      	cmp	r7, #111	; 0x6f
 800409e:	bf0c      	ite	eq
 80040a0:	2308      	moveq	r3, #8
 80040a2:	230a      	movne	r3, #10
 80040a4:	2100      	movs	r1, #0
 80040a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040aa:	6865      	ldr	r5, [r4, #4]
 80040ac:	60a5      	str	r5, [r4, #8]
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	bfa2      	ittt	ge
 80040b2:	6821      	ldrge	r1, [r4, #0]
 80040b4:	f021 0104 	bicge.w	r1, r1, #4
 80040b8:	6021      	strge	r1, [r4, #0]
 80040ba:	b90e      	cbnz	r6, 80040c0 <_printf_i+0x118>
 80040bc:	2d00      	cmp	r5, #0
 80040be:	d04d      	beq.n	800415c <_printf_i+0x1b4>
 80040c0:	4615      	mov	r5, r2
 80040c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c6:	fb03 6711 	mls	r7, r3, r1, r6
 80040ca:	5dc7      	ldrb	r7, [r0, r7]
 80040cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040d0:	4637      	mov	r7, r6
 80040d2:	42bb      	cmp	r3, r7
 80040d4:	460e      	mov	r6, r1
 80040d6:	d9f4      	bls.n	80040c2 <_printf_i+0x11a>
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d10b      	bne.n	80040f4 <_printf_i+0x14c>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	07de      	lsls	r6, r3, #31
 80040e0:	d508      	bpl.n	80040f4 <_printf_i+0x14c>
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	6861      	ldr	r1, [r4, #4]
 80040e6:	4299      	cmp	r1, r3
 80040e8:	bfde      	ittt	le
 80040ea:	2330      	movle	r3, #48	; 0x30
 80040ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040f4:	1b52      	subs	r2, r2, r5
 80040f6:	6122      	str	r2, [r4, #16]
 80040f8:	f8cd a000 	str.w	sl, [sp]
 80040fc:	464b      	mov	r3, r9
 80040fe:	aa03      	add	r2, sp, #12
 8004100:	4621      	mov	r1, r4
 8004102:	4640      	mov	r0, r8
 8004104:	f7ff fee2 	bl	8003ecc <_printf_common>
 8004108:	3001      	adds	r0, #1
 800410a:	d14c      	bne.n	80041a6 <_printf_i+0x1fe>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	b004      	add	sp, #16
 8004112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004116:	4835      	ldr	r0, [pc, #212]	; (80041ec <_printf_i+0x244>)
 8004118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800411c:	6829      	ldr	r1, [r5, #0]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	f851 6b04 	ldr.w	r6, [r1], #4
 8004124:	6029      	str	r1, [r5, #0]
 8004126:	061d      	lsls	r5, r3, #24
 8004128:	d514      	bpl.n	8004154 <_printf_i+0x1ac>
 800412a:	07df      	lsls	r7, r3, #31
 800412c:	bf44      	itt	mi
 800412e:	f043 0320 	orrmi.w	r3, r3, #32
 8004132:	6023      	strmi	r3, [r4, #0]
 8004134:	b91e      	cbnz	r6, 800413e <_printf_i+0x196>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	f023 0320 	bic.w	r3, r3, #32
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	2310      	movs	r3, #16
 8004140:	e7b0      	b.n	80040a4 <_printf_i+0xfc>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f043 0320 	orr.w	r3, r3, #32
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	2378      	movs	r3, #120	; 0x78
 800414c:	4828      	ldr	r0, [pc, #160]	; (80041f0 <_printf_i+0x248>)
 800414e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004152:	e7e3      	b.n	800411c <_printf_i+0x174>
 8004154:	0659      	lsls	r1, r3, #25
 8004156:	bf48      	it	mi
 8004158:	b2b6      	uxthmi	r6, r6
 800415a:	e7e6      	b.n	800412a <_printf_i+0x182>
 800415c:	4615      	mov	r5, r2
 800415e:	e7bb      	b.n	80040d8 <_printf_i+0x130>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	6826      	ldr	r6, [r4, #0]
 8004164:	6961      	ldr	r1, [r4, #20]
 8004166:	1d18      	adds	r0, r3, #4
 8004168:	6028      	str	r0, [r5, #0]
 800416a:	0635      	lsls	r5, r6, #24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	d501      	bpl.n	8004174 <_printf_i+0x1cc>
 8004170:	6019      	str	r1, [r3, #0]
 8004172:	e002      	b.n	800417a <_printf_i+0x1d2>
 8004174:	0670      	lsls	r0, r6, #25
 8004176:	d5fb      	bpl.n	8004170 <_printf_i+0x1c8>
 8004178:	8019      	strh	r1, [r3, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	4615      	mov	r5, r2
 8004180:	e7ba      	b.n	80040f8 <_printf_i+0x150>
 8004182:	682b      	ldr	r3, [r5, #0]
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	602a      	str	r2, [r5, #0]
 8004188:	681d      	ldr	r5, [r3, #0]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	2100      	movs	r1, #0
 800418e:	4628      	mov	r0, r5
 8004190:	f7fc f826 	bl	80001e0 <memchr>
 8004194:	b108      	cbz	r0, 800419a <_printf_i+0x1f2>
 8004196:	1b40      	subs	r0, r0, r5
 8004198:	6060      	str	r0, [r4, #4]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	2300      	movs	r3, #0
 80041a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a4:	e7a8      	b.n	80040f8 <_printf_i+0x150>
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	462a      	mov	r2, r5
 80041aa:	4649      	mov	r1, r9
 80041ac:	4640      	mov	r0, r8
 80041ae:	47d0      	blx	sl
 80041b0:	3001      	adds	r0, #1
 80041b2:	d0ab      	beq.n	800410c <_printf_i+0x164>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	079b      	lsls	r3, r3, #30
 80041b8:	d413      	bmi.n	80041e2 <_printf_i+0x23a>
 80041ba:	68e0      	ldr	r0, [r4, #12]
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	4298      	cmp	r0, r3
 80041c0:	bfb8      	it	lt
 80041c2:	4618      	movlt	r0, r3
 80041c4:	e7a4      	b.n	8004110 <_printf_i+0x168>
 80041c6:	2301      	movs	r3, #1
 80041c8:	4632      	mov	r2, r6
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	47d0      	blx	sl
 80041d0:	3001      	adds	r0, #1
 80041d2:	d09b      	beq.n	800410c <_printf_i+0x164>
 80041d4:	3501      	adds	r5, #1
 80041d6:	68e3      	ldr	r3, [r4, #12]
 80041d8:	9903      	ldr	r1, [sp, #12]
 80041da:	1a5b      	subs	r3, r3, r1
 80041dc:	42ab      	cmp	r3, r5
 80041de:	dcf2      	bgt.n	80041c6 <_printf_i+0x21e>
 80041e0:	e7eb      	b.n	80041ba <_printf_i+0x212>
 80041e2:	2500      	movs	r5, #0
 80041e4:	f104 0619 	add.w	r6, r4, #25
 80041e8:	e7f5      	b.n	80041d6 <_printf_i+0x22e>
 80041ea:	bf00      	nop
 80041ec:	0800456d 	.word	0x0800456d
 80041f0:	0800457e 	.word	0x0800457e

080041f4 <memcpy>:
 80041f4:	440a      	add	r2, r1
 80041f6:	4291      	cmp	r1, r2
 80041f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041fc:	d100      	bne.n	8004200 <memcpy+0xc>
 80041fe:	4770      	bx	lr
 8004200:	b510      	push	{r4, lr}
 8004202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800420a:	4291      	cmp	r1, r2
 800420c:	d1f9      	bne.n	8004202 <memcpy+0xe>
 800420e:	bd10      	pop	{r4, pc}

08004210 <memmove>:
 8004210:	4288      	cmp	r0, r1
 8004212:	b510      	push	{r4, lr}
 8004214:	eb01 0402 	add.w	r4, r1, r2
 8004218:	d902      	bls.n	8004220 <memmove+0x10>
 800421a:	4284      	cmp	r4, r0
 800421c:	4623      	mov	r3, r4
 800421e:	d807      	bhi.n	8004230 <memmove+0x20>
 8004220:	1e43      	subs	r3, r0, #1
 8004222:	42a1      	cmp	r1, r4
 8004224:	d008      	beq.n	8004238 <memmove+0x28>
 8004226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800422a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800422e:	e7f8      	b.n	8004222 <memmove+0x12>
 8004230:	4402      	add	r2, r0
 8004232:	4601      	mov	r1, r0
 8004234:	428a      	cmp	r2, r1
 8004236:	d100      	bne.n	800423a <memmove+0x2a>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800423e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004242:	e7f7      	b.n	8004234 <memmove+0x24>

08004244 <_free_r>:
 8004244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004246:	2900      	cmp	r1, #0
 8004248:	d044      	beq.n	80042d4 <_free_r+0x90>
 800424a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424e:	9001      	str	r0, [sp, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f1a1 0404 	sub.w	r4, r1, #4
 8004256:	bfb8      	it	lt
 8004258:	18e4      	addlt	r4, r4, r3
 800425a:	f000 f913 	bl	8004484 <__malloc_lock>
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <_free_r+0x94>)
 8004260:	9801      	ldr	r0, [sp, #4]
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	b933      	cbnz	r3, 8004274 <_free_r+0x30>
 8004266:	6063      	str	r3, [r4, #4]
 8004268:	6014      	str	r4, [r2, #0]
 800426a:	b003      	add	sp, #12
 800426c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004270:	f000 b90e 	b.w	8004490 <__malloc_unlock>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d908      	bls.n	800428a <_free_r+0x46>
 8004278:	6825      	ldr	r5, [r4, #0]
 800427a:	1961      	adds	r1, r4, r5
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1949      	addeq	r1, r1, r5
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	e7ed      	b.n	8004266 <_free_r+0x22>
 800428a:	461a      	mov	r2, r3
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b10b      	cbz	r3, 8004294 <_free_r+0x50>
 8004290:	42a3      	cmp	r3, r4
 8004292:	d9fa      	bls.n	800428a <_free_r+0x46>
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	1855      	adds	r5, r2, r1
 8004298:	42a5      	cmp	r5, r4
 800429a:	d10b      	bne.n	80042b4 <_free_r+0x70>
 800429c:	6824      	ldr	r4, [r4, #0]
 800429e:	4421      	add	r1, r4
 80042a0:	1854      	adds	r4, r2, r1
 80042a2:	42a3      	cmp	r3, r4
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	d1e0      	bne.n	800426a <_free_r+0x26>
 80042a8:	681c      	ldr	r4, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6053      	str	r3, [r2, #4]
 80042ae:	4421      	add	r1, r4
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	e7da      	b.n	800426a <_free_r+0x26>
 80042b4:	d902      	bls.n	80042bc <_free_r+0x78>
 80042b6:	230c      	movs	r3, #12
 80042b8:	6003      	str	r3, [r0, #0]
 80042ba:	e7d6      	b.n	800426a <_free_r+0x26>
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	1961      	adds	r1, r4, r5
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf04      	itt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	bf04      	itt	eq
 80042cc:	1949      	addeq	r1, r1, r5
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	6054      	str	r4, [r2, #4]
 80042d2:	e7ca      	b.n	800426a <_free_r+0x26>
 80042d4:	b003      	add	sp, #12
 80042d6:	bd30      	pop	{r4, r5, pc}
 80042d8:	2000019c 	.word	0x2000019c

080042dc <sbrk_aligned>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4e0e      	ldr	r6, [pc, #56]	; (8004318 <sbrk_aligned+0x3c>)
 80042e0:	460c      	mov	r4, r1
 80042e2:	6831      	ldr	r1, [r6, #0]
 80042e4:	4605      	mov	r5, r0
 80042e6:	b911      	cbnz	r1, 80042ee <sbrk_aligned+0x12>
 80042e8:	f000 f8bc 	bl	8004464 <_sbrk_r>
 80042ec:	6030      	str	r0, [r6, #0]
 80042ee:	4621      	mov	r1, r4
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 f8b7 	bl	8004464 <_sbrk_r>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d00a      	beq.n	8004310 <sbrk_aligned+0x34>
 80042fa:	1cc4      	adds	r4, r0, #3
 80042fc:	f024 0403 	bic.w	r4, r4, #3
 8004300:	42a0      	cmp	r0, r4
 8004302:	d007      	beq.n	8004314 <sbrk_aligned+0x38>
 8004304:	1a21      	subs	r1, r4, r0
 8004306:	4628      	mov	r0, r5
 8004308:	f000 f8ac 	bl	8004464 <_sbrk_r>
 800430c:	3001      	adds	r0, #1
 800430e:	d101      	bne.n	8004314 <sbrk_aligned+0x38>
 8004310:	f04f 34ff 	mov.w	r4, #4294967295
 8004314:	4620      	mov	r0, r4
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	200001a0 	.word	0x200001a0

0800431c <_malloc_r>:
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	1ccd      	adds	r5, r1, #3
 8004322:	f025 0503 	bic.w	r5, r5, #3
 8004326:	3508      	adds	r5, #8
 8004328:	2d0c      	cmp	r5, #12
 800432a:	bf38      	it	cc
 800432c:	250c      	movcc	r5, #12
 800432e:	2d00      	cmp	r5, #0
 8004330:	4607      	mov	r7, r0
 8004332:	db01      	blt.n	8004338 <_malloc_r+0x1c>
 8004334:	42a9      	cmp	r1, r5
 8004336:	d905      	bls.n	8004344 <_malloc_r+0x28>
 8004338:	230c      	movs	r3, #12
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	2600      	movs	r6, #0
 800433e:	4630      	mov	r0, r6
 8004340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004344:	4e2e      	ldr	r6, [pc, #184]	; (8004400 <_malloc_r+0xe4>)
 8004346:	f000 f89d 	bl	8004484 <__malloc_lock>
 800434a:	6833      	ldr	r3, [r6, #0]
 800434c:	461c      	mov	r4, r3
 800434e:	bb34      	cbnz	r4, 800439e <_malloc_r+0x82>
 8004350:	4629      	mov	r1, r5
 8004352:	4638      	mov	r0, r7
 8004354:	f7ff ffc2 	bl	80042dc <sbrk_aligned>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	4604      	mov	r4, r0
 800435c:	d14d      	bne.n	80043fa <_malloc_r+0xde>
 800435e:	6834      	ldr	r4, [r6, #0]
 8004360:	4626      	mov	r6, r4
 8004362:	2e00      	cmp	r6, #0
 8004364:	d140      	bne.n	80043e8 <_malloc_r+0xcc>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	4631      	mov	r1, r6
 800436a:	4638      	mov	r0, r7
 800436c:	eb04 0803 	add.w	r8, r4, r3
 8004370:	f000 f878 	bl	8004464 <_sbrk_r>
 8004374:	4580      	cmp	r8, r0
 8004376:	d13a      	bne.n	80043ee <_malloc_r+0xd2>
 8004378:	6821      	ldr	r1, [r4, #0]
 800437a:	3503      	adds	r5, #3
 800437c:	1a6d      	subs	r5, r5, r1
 800437e:	f025 0503 	bic.w	r5, r5, #3
 8004382:	3508      	adds	r5, #8
 8004384:	2d0c      	cmp	r5, #12
 8004386:	bf38      	it	cc
 8004388:	250c      	movcc	r5, #12
 800438a:	4629      	mov	r1, r5
 800438c:	4638      	mov	r0, r7
 800438e:	f7ff ffa5 	bl	80042dc <sbrk_aligned>
 8004392:	3001      	adds	r0, #1
 8004394:	d02b      	beq.n	80043ee <_malloc_r+0xd2>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	442b      	add	r3, r5
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	e00e      	b.n	80043bc <_malloc_r+0xa0>
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	1b52      	subs	r2, r2, r5
 80043a2:	d41e      	bmi.n	80043e2 <_malloc_r+0xc6>
 80043a4:	2a0b      	cmp	r2, #11
 80043a6:	d916      	bls.n	80043d6 <_malloc_r+0xba>
 80043a8:	1961      	adds	r1, r4, r5
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	6025      	str	r5, [r4, #0]
 80043ae:	bf18      	it	ne
 80043b0:	6059      	strne	r1, [r3, #4]
 80043b2:	6863      	ldr	r3, [r4, #4]
 80043b4:	bf08      	it	eq
 80043b6:	6031      	streq	r1, [r6, #0]
 80043b8:	5162      	str	r2, [r4, r5]
 80043ba:	604b      	str	r3, [r1, #4]
 80043bc:	4638      	mov	r0, r7
 80043be:	f104 060b 	add.w	r6, r4, #11
 80043c2:	f000 f865 	bl	8004490 <__malloc_unlock>
 80043c6:	f026 0607 	bic.w	r6, r6, #7
 80043ca:	1d23      	adds	r3, r4, #4
 80043cc:	1af2      	subs	r2, r6, r3
 80043ce:	d0b6      	beq.n	800433e <_malloc_r+0x22>
 80043d0:	1b9b      	subs	r3, r3, r6
 80043d2:	50a3      	str	r3, [r4, r2]
 80043d4:	e7b3      	b.n	800433e <_malloc_r+0x22>
 80043d6:	6862      	ldr	r2, [r4, #4]
 80043d8:	42a3      	cmp	r3, r4
 80043da:	bf0c      	ite	eq
 80043dc:	6032      	streq	r2, [r6, #0]
 80043de:	605a      	strne	r2, [r3, #4]
 80043e0:	e7ec      	b.n	80043bc <_malloc_r+0xa0>
 80043e2:	4623      	mov	r3, r4
 80043e4:	6864      	ldr	r4, [r4, #4]
 80043e6:	e7b2      	b.n	800434e <_malloc_r+0x32>
 80043e8:	4634      	mov	r4, r6
 80043ea:	6876      	ldr	r6, [r6, #4]
 80043ec:	e7b9      	b.n	8004362 <_malloc_r+0x46>
 80043ee:	230c      	movs	r3, #12
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4638      	mov	r0, r7
 80043f4:	f000 f84c 	bl	8004490 <__malloc_unlock>
 80043f8:	e7a1      	b.n	800433e <_malloc_r+0x22>
 80043fa:	6025      	str	r5, [r4, #0]
 80043fc:	e7de      	b.n	80043bc <_malloc_r+0xa0>
 80043fe:	bf00      	nop
 8004400:	2000019c 	.word	0x2000019c

08004404 <_realloc_r>:
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	4680      	mov	r8, r0
 800440a:	4614      	mov	r4, r2
 800440c:	460e      	mov	r6, r1
 800440e:	b921      	cbnz	r1, 800441a <_realloc_r+0x16>
 8004410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004414:	4611      	mov	r1, r2
 8004416:	f7ff bf81 	b.w	800431c <_malloc_r>
 800441a:	b92a      	cbnz	r2, 8004428 <_realloc_r+0x24>
 800441c:	f7ff ff12 	bl	8004244 <_free_r>
 8004420:	4625      	mov	r5, r4
 8004422:	4628      	mov	r0, r5
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004428:	f000 f838 	bl	800449c <_malloc_usable_size_r>
 800442c:	4284      	cmp	r4, r0
 800442e:	4607      	mov	r7, r0
 8004430:	d802      	bhi.n	8004438 <_realloc_r+0x34>
 8004432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004436:	d812      	bhi.n	800445e <_realloc_r+0x5a>
 8004438:	4621      	mov	r1, r4
 800443a:	4640      	mov	r0, r8
 800443c:	f7ff ff6e 	bl	800431c <_malloc_r>
 8004440:	4605      	mov	r5, r0
 8004442:	2800      	cmp	r0, #0
 8004444:	d0ed      	beq.n	8004422 <_realloc_r+0x1e>
 8004446:	42bc      	cmp	r4, r7
 8004448:	4622      	mov	r2, r4
 800444a:	4631      	mov	r1, r6
 800444c:	bf28      	it	cs
 800444e:	463a      	movcs	r2, r7
 8004450:	f7ff fed0 	bl	80041f4 <memcpy>
 8004454:	4631      	mov	r1, r6
 8004456:	4640      	mov	r0, r8
 8004458:	f7ff fef4 	bl	8004244 <_free_r>
 800445c:	e7e1      	b.n	8004422 <_realloc_r+0x1e>
 800445e:	4635      	mov	r5, r6
 8004460:	e7df      	b.n	8004422 <_realloc_r+0x1e>
	...

08004464 <_sbrk_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4d06      	ldr	r5, [pc, #24]	; (8004480 <_sbrk_r+0x1c>)
 8004468:	2300      	movs	r3, #0
 800446a:	4604      	mov	r4, r0
 800446c:	4608      	mov	r0, r1
 800446e:	602b      	str	r3, [r5, #0]
 8004470:	f7fd fc7a 	bl	8001d68 <_sbrk>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_sbrk_r+0x1a>
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	b103      	cbz	r3, 800447e <_sbrk_r+0x1a>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	200001a4 	.word	0x200001a4

08004484 <__malloc_lock>:
 8004484:	4801      	ldr	r0, [pc, #4]	; (800448c <__malloc_lock+0x8>)
 8004486:	f000 b811 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800448a:	bf00      	nop
 800448c:	200001a8 	.word	0x200001a8

08004490 <__malloc_unlock>:
 8004490:	4801      	ldr	r0, [pc, #4]	; (8004498 <__malloc_unlock+0x8>)
 8004492:	f000 b80c 	b.w	80044ae <__retarget_lock_release_recursive>
 8004496:	bf00      	nop
 8004498:	200001a8 	.word	0x200001a8

0800449c <_malloc_usable_size_r>:
 800449c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a0:	1f18      	subs	r0, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bfbc      	itt	lt
 80044a6:	580b      	ldrlt	r3, [r1, r0]
 80044a8:	18c0      	addlt	r0, r0, r3
 80044aa:	4770      	bx	lr

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
